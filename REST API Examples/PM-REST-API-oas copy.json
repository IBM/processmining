{
    "openapi": "3.0.1",
    "info": {
      "title": "Process Mining API",
      "description": "This API provides a collection of services to get information and  statistics about projects and manage their lifecycle.  \n## **Finding the API URL**\nCreation of the REST API URL depends on the deployment type of Process Mining. </br> In case of native deployment, the root URL to invoke the API and to open the Process Mining WUI are the same. </br> In case of containerized deployment on RedHat OCP, the API URL is provided in the Status section of the CRD.  The following CLI command can be used to retrieve the API URL:  <pre>oc get processmining <processmining-instance> -o jsonpath={..status.components.api..uri}' </pre>\n## **Using the REST API**\nAll the API requests must include a JWT Bearer token in the Authorization header except for the two APIs listed below, where the token is included in the API request body: <br/><br/> *1. /integration/export/{projectKey}/decision-rules </br> 2. /connectors/integration/bai/import* <br/> <br/>  The existing clients can still include the authentication token as query parameter, even if it's deprecated and will be removed in a future release. <br/> <br/> It's possible to generate an authentication token by providing the API Key and the API account,  which are provided in the **User Profile** view of the Process Mining user interface. </br></br> The JWT token will expire in 30 minutes so the client should generate a new token to authenticate the API calls after 30 minutes. <br/></br> See the following curl command to generate the JWT token:  <br/>\n<br/>\n**curl -X 'POST' \\   <br/> 'https://_<yourdomain.com>_/integration/sign' \\  <br/> -H 'accept: application/json' \\  <br/> -H 'Content-Type: application/json' \\  <br/> -d '{  <br/> \"uid\": \"_<user.pm>_\",  <br/> \"apiKey\": \"_<api-key>_\"  <br/> }'** <br/><br/> where _<yourdomain.com>_ is the domain name of the Process Mining environment, _<user.pm>_ is the User ID for the Process Mining application, and _<api-key>_ is the API Key provided in the **User Profile** view of the Process Mining user interface.",
      "version": "1.14.1"
    },
    "servers": [
      {
        "url": "https://phasoses1.fyre.ibm.com"
      }
    ],
    "security": [
      {
        "bearerAuth": ["eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0YXNrLm1pbmVyIiwiaWF0IjoxNjk2NjAyNjA5LCJleHAiOjE2OTY2MDQ0MDl9.Kfvtsum0PNtDGO4kUSWR538uPdSFLKPACDbqOmI8684"]
      }
    ],
    "paths": {
      "/integration/time": {
        "get": {
          "deprecated": true,
          "security": [],
          "operationId": "GetServerTime",
          "description": "This API request retrieves the current server time (in milliseconds) that  acts as the base time for the other API requests.",
          "parameters": [
            {
              "name": "uid",
              "in": "query",
              "description": "API Account",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "user.pm"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LongResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": 1600065125864,
                        "success": true
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "Get the Server time",
          "tags": [
            "Time"
          ]
        }
      },
      "/integration/auth": {
        "get": {
          "deprecated": true,
          "operationId": "GetServerOtp",
          "description": "This API request generates an OTP authentication token for a web  connection to Process Mining. </br> This API is Deprecated and will be removed in a future version.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "3aet68p9j9fiqt4n04fpsc2p1s",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "text/html": {
                  "examples": {
                    "Signature not provided": {
                      "value": "Unauthorized request"
                    },
                    "Signature empty": {
                      "value": "Invalid Token"
                    },
                    "Signature not valid": {
                      "value": "Invalid Token"
                    }
                  }
                }
              }
            }
          },
          "summary": "Get a web authentication token (Deprecated).",
          "tags": [
            "Authorization"
          ]
        }
      },
      "/integration/sign": {
        "post": {
          "security": [],
          "operationId": "CreateToken",
          "description": "This API request generates the JWT token that is required for the authentication of the REST API calls.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "sign": "3aet68p9j9fiqt4n04fpsc2p1s",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "API Account not provided": {
                      "value": {
                        "error": 1013,
                        "data": "Parameter uid is null",
                        "success": false
                      }
                    },
                    "API Account empty": {
                      "value": {
                        "error": 1013,
                        "data": "Parameter uid is empty",
                        "success": false
                      }
                    },
                    "API Account not found": {
                      "value": {
                        "error": 1005,
                        "data": "User <uid> not found",
                        "success": false
                      }
                    },
                    "API Key not enabled": {
                      "value": {
                        "error": 1016,
                        "data": "API Key is not enabled for user <uid>",
                        "success": false
                      }
                    },
                    "ApiKey not valid for User": {
                      "value": {
                        "error": 1038,
                        "data": "ApiKey is not valid for the user account provided",
                        "success": false
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "Create an authentication token.",
          "tags": [
            "Authorization"
          ]
        }
      },
      "/integration/csv/job-status/{jobKey}": {
        "get": {
          "operationId": "GetJobStatus",
          "description": "This API request checks the status of a job.",
          "parameters": [
            {
              "name": "jobKey",
              "in": "path",
              "required": true,
              "description": "Job Key",
              "schema": {
                "type": "string"
              },
              "example": "myjob"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "job complete": {
                      "value": {
                        "data": "complete",
                        "success": true
                      }
                    },
                    "job in progress": {
                      "value": {
                        "data": "in_progress",
                        "success": true
                      }
                    },
                    "job in error": {
                      "value": {
                        "data": "error",
                        "message": "error message",
                        "success": true
                      }
                    },
                    "job invalid": {
                      "value": {
                        "data": "invalid job",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the status of an asynchronous job related to data upload or process mining",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/decision-rules/job-status/{jobKey}": {
        "get": {
          "operationId": "GetDrJobStatus",
          "description": "This API request checks the status of a job related to decision  rules mining.",
          "parameters": [
            {
              "name": "jobKey",
              "in": "path",
              "required": true,
              "description": "Job Key",
              "schema": {
                "type": "string"
              },
              "example": "myjob"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusResponse"
                  },
                  "examples": {
                    "job complete": {
                      "value": {
                        "data": "complete",
                        "output": {
                          "bpmnXml": "Exported BPMN in XML format",
                          "mapGatewayIdDmnDiagram": "Exported Decion Rules in XML format"
                        },
                        "success": true
                      }
                    },
                    "job in progress": {
                      "value": {
                        "data": "in_progress",
                        "success": true
                      }
                    },
                    "job in error": {
                      "value": {
                        "data": "error",
                        "message": "error message",
                        "success": true
                      }
                    },
                    "job invalid": {
                      "value": {
                        "data": "invalid job",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the status of an asynchronous job related to decision rules mining",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/connectors/integration/bai/job-status/{jobKey}": {
        "get": {
          "operationId": "GetBaiJobStatus",
          "description": "This API request checks the status of a job related to data import  from BAI.",
          "parameters": [
            {
              "name": "jobKey",
              "in": "path",
              "required": true,
              "description": "Job Key",
              "schema": {
                "type": "string"
              },
              "example": "myjob"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusResponseBAI"
                  },
                  "examples": {
                    "job complete": {
                      "value": {
                        "data": "complete",
                        "output": {
                          "projectKey": "myprocess",
                          "orgKey": "2b2ac347"
                        },
                        "success": true
                      }
                    },
                    "job in progress": {
                      "value": {
                        "data": "in_progress",
                        "success": true
                      }
                    },
                    "job in error": {
                      "value": {
                        "data": "error",
                        "message": "error message",
                        "success": true
                      }
                    },
                    "job invalid": {
                      "value": {
                        "data": "invalid job",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the status of an asynchronous job related to data import from BAI",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/processes": {
        "get": {
          "operationId": "GetProcessList",
          "description": "This API request retrieves the list of processes the user is  authorized for.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessesResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "company": "cognitive",
                            "organization": "c0a02534",
                            "organizationTitle": "TutorialsOrg",
                            "projectName": "tutorial1",
                            "projectTitle": "tutorial1",
                            "projectUrl": "/index.html#!/tutorials",
                            "projectOwner": "maintenance.pm",
                            "projectTutorial": true,
                            "projectSnapshot": true,
                            "projectMultiLevel": false,
                            "projectTotalCaseCount": 0,
                            "projectTotalEventCount": 0,
                            "projectBusinessHours": "No",
                            "projectExcludeWeekends": true,
                            "projectRefModel": true,
                            "projectCurrency": "EUR",
                            "projectLastAccessDate": 1663682650108
                          },
                          {
                            "company": "cognitive",
                            "organization": "c0a02535",
                            "organizationTitle": "ConformanceOrg",
                            "projectName": "project123",
                            "projectTitle": "projhect123",
                            "projectUrl": "/index.html#!/project123",
                            "projectOwner": "maintenance.pm",
                            "projectTutorial": true,
                            "projectSnapshot": true,
                            "projectMultiLevel": false,
                            "projectTotalCaseCount": 0,
                            "projectTotalEventCount": 0,
                            "projectBusinessHours": "No",
                            "projectExcludeWeekends": true,
                            "projectRefModel": true,
                            "projectCurrency": "USD",
                            "projectLastAccessDate": 1667992873845
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of processes",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "CreateNewProject",
          "description": "This API request  creates a new project with the specified title in  the target organization.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRefRequest"
                },
                "examples": {
                  "success": {
                    "value": {
                      "title": "myprocess",
                      "org": "4d725f50"
                    }
                  },
                  "Project not provided (1)": {
                    "value": null
                  },
                  "Project not provided (2)": {
                    "value": {
                      "org": "4d725f50"
                    }
                  },
                  "Organization not provided": {
                    "value": {
                      "title": "myprocess"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "projectkey": "myprocesskey",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Bad request": {
                      "value": {
                        "error": 1025,
                        "data": "Request is not well formed",
                        "success": false
                      }
                    },
                    "Project not provided": {
                      "value": {
                        "error": 1002,
                        "data": "Parameter title is null",
                        "success": false
                      }
                    },
                    "Project empty": {
                      "value": {
                        "error": 1002,
                        "data": "Parameter title is empty",
                        "success": false
                      }
                    },
                    "Project already exists": {
                      "value": {
                        "error": 1022,
                        "data": "Another project with the same name already exists",
                        "success": false
                      }
                    },
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/access/processes": {
        "get": {
          "operationId": "GetLastAccessedProjects",
          "description": "This API request retrieves the list of last accessed processes.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessProcessesResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "label": "myprocess",
                            "sub_text": "",
                            "drilldown_url": "index.html#!/0/myprocess/workflow"
                          },
                          {
                            "label": "tutorial1",
                            "sub_text": "tutorials",
                            "drilldown_url": "index.html#!/4d725f50/project12/workflow"
                          },
                          {
                            "label": "tutorial2",
                            "sub_text": "tutorials",
                            "drilldown_url": "index.html#!/4d725f50/project12/workflow"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of last accessed processes",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}": {
        "get": {
          "operationId": "GetProjectInfo",
          "description": "This API request retrieves a full set of information related to the  project identified by the project key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFullResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "info": {
                            "name": "myprocess,",
                            "title": "Myprocess,",
                            "tutorial": "false,",
                            "snapshot": "false,",
                            "multiLevel": "false,",
                            "owner": "follia,",
                            "organization": "2b2ac347,",
                            "organizationTitle": "MyOrganization,",
                            "totalCaseCount": "3,",
                            "totalEventCount": "9,",
                            "businessHours": "No,",
                            "excludeWeekends": "true,",
                            "refModel": "false,",
                            "currency": "EUR,",
                            "lastAccessDate": 1619013456965
                          },
                          "navigation": {
                            "pathToDataSource": "index.html#!/2b2ac347/myprocess/project,",
                            "pathToDashboard": "index.html#!/2b2ac347/myprocess/overview,",
                            "pathToDiff": "index.html#!/2b2ac347/myprocess/diff-analysis,",
                            "pathToWorkflow": "index.html#!/2b2ac347/myprocess/workflow,",
                            "pathToBpmn": "index.html#!/2b2ac347/myprocess/bpmn,",
                            "pathToActivityMap": "index.html#!/2b2ac347/myprocess/activity-map,",
                            "pathToSocialNet": "index.html#!/2b2ac347/project10/social-net"
                          },
                          "performance": {
                            "eventCount": "1000,",
                            "caseCount": "100,",
                            "arrivalRate": "3.0,",
                            "averageCaseLeadTime": "3700000.0,",
                            "medianCaseLeadTime": "3700000.0,",
                            "minimumCaseLeadTime": "3700000.0,",
                            "maximumCaseLeadTime": 3700000
                          },
                          "conformance": {
                            "similarity": "1.0,",
                            "averageFitness": "1.0,",
                            "minimumFitness": "1.0,",
                            "maximumFitness": 1
                          }
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get detailed information about a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "DeleteProject",
          "description": "This API request will delete the project identified by the project key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectKeyResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "projectKey": "myprocess,",
                        "success\"": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/backups": {
        "post": {
          "operationId": "CreateBackup",
          "description": "This API request creates a backup of the process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBackup"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateBackupResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForCreateBackup"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create a backup of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "get": {
          "operationId": "GetBackups",
          "description": "This API request retrieves the project backup information related to a project key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeploymentResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of all backups of a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/upload-backup": {
        "post": {
          "operationId": "UploadBackup",
          "description": "This API request uploads the backup files for the given backup ID.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/file"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "backupInfo": {
                        "$ref": "#/components/schemas/Backup"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Upload a backup in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/backups/{backupId}": {
        "delete": {
          "operationId": "DeleteBackup",
          "description": "This API request deletes the backup files per the backup ID.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "backupId",
              "in": "path",
              "required": true,
              "description": "Backup ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a backup from a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "put": {
          "operationId": "ApplyBackup",
          "description": "This API applies the backup identified by the backup ID.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "backupId",
              "in": "path",
              "required": true,
              "description": "Backup ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply a backup to a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "get": {
          "operationId": "DownloadBackup",
          "description": "This API request downloads the backup files for the given backup ID.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "backupId",
              "in": "path",
              "required": true,
              "description": "Backup ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "$ref": "#/components/schemas/BackupFile"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Downloads a backup in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/variables": {
        "get": {
          "operationId": "GetProcessVariables",
          "description": "This API request retrieves the varibles associated with a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessVariableBatchResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of variables in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "CreateProcessVariables",
          "description": "This API request creates or updates variables in a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessVariable"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessVariableBatchResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForPost"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create or update variables in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/variables/{variable}": {
        "get": {
          "operationId": "GetProcessVariable",
          "description": "This API request retrieves a specific varible associated with a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/processVariable"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessVariableResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/InvalidProcessVariable"
            }
          },
          "summary": "Get a specific variable in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "DeleteProcessVariable",
          "description": "This API request deletes an existing variable associated with a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/processVariable"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessVariableResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/InvalidProcessVariable"
            }
          },
          "summary": "Delete a  variable from a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/meta": {
        "get": {
          "operationId": "GetProjectMetaInfo",
          "description": "This API request retrieves the information related to the  project identified by the project key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "name": "order-standalone-snapshot",
                          "title": "Process",
                          "tutorial": false,
                          "snapshot": true,
                          "multiLevel": false,
                          "owner": "nandini.narayanankutty",
                          "organization": "e774329b",
                          "organizationTitle": "Order Standalone"
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get summary information about a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/workflow": {
        "get": {
          "operationId": "GetProjectWorkflow",
          "description": "This API request retrieves the workflow of the process as SVG. <br/>  The returned workflow will reflect the level of detail that is currently  set in the project settings. <br/> ",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "applyKPI",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "KPI Threshold Activator",
              "schema": {
                "type": "boolean",
                "default": false
              },
              "example": false
            },
            {
              "name": "viewType",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Workflow view selector, legal values are: <br/> &nbsp;&nbsp; 0 - Frequency view <br/> &nbsp;&nbsp; 1 - Performance view (Avg) <br/> &nbsp;&nbsp; 2 - Performance view (Max) <br/> &nbsp;&nbsp; 3 - Performance view (Min) <br/>&nbsp;&nbsp; 4 - Performance view (Median) <br/>&nbsp;&nbsp; 5 - Rework view<br/>&nbsp;&nbsp; 6 - Performance view (Weighted) <br/>&nbsp;&nbsp; 7 - Cost view <br/>&nbsp;&nbsp; 8 - Overall cost view <br/>",
              "schema": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8"
                ],
                "default": "0"
              },
              "example": "0"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": ""
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the workflow of a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/export/{projectKey}/{modelType}": {
        "get": {
          "operationId": "GetProjectModel",
          "description": "This API request retrieves the current process model as BPMN or  XPDL.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "name": "modelType",
              "in": "path",
              "required": true,
              "description": "Model type",
              "schema": {
                "type": "string",
                "enum": [
                  "BPMN",
                  "XPDL"
                ]
              },
              "example": "BPMN"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "withGateways",
              "in": "query",
              "required": true,
              "schema": {
                "type": "boolean"
              },
              "example": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxicG1uMjpkZWZpbml0aW9ucyB4bWxuczpicG1uMj0iaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTCIgeG1sbnM6YnBtbmRpPSJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJIiB4bWxuczpkYz0iaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvREMiIHhtbG5zOmRpPSJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9ESSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgaWQ9IkJQTU5EZWZpbml0aW9uc18xIj4KICAgIDxicG1uMjpwcm9jZXNzIGlkPSJCUE1OUHJvY2Vzc18xIiBpc0V4ZWN1dGFibGU9InRydWUiPgogICAgICAgIDxicG1uMjp1c2VyVGFzayBpZD0ibm9kZV9fMTc0NTQ3NzUxNCIgbmFtZT0iTmV0d29yayBBZGp1c3RtZW50IFJlcXVlc3RlZCI+CiAgICAgICAgICAgIDxicG1uMjpvdXRnb2luZz5ub2RlX18yMDY0MTg4ODc2PC9icG1uMjpvdXRnb2luZz4KICAgICAgICAgICAgPGJwbW4yOmluY29taW5nPm5vZGVfMjc2ODc0NjMyPC9icG1uMjppbmNvbWluZz4KICAgICAgICA8L2JwbW4yOnVzZXJUYXNrPgogICAgICAgIDxicG1uMjpleGNsdXNpdmVHYXRld2F5IGdhdGV3YXlEaXJlY3Rpb249IkNvbnZlcmdpbmciIGlkPSJub2RlX183OTc5OTAyNDUiIG5hbWU9IkdXLVhPUi0yNS",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the model of a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/export/{projectKey}/decision-rules": {
        "post": {
          "operationId": "ExportDecisionRules",
          "description": "This API request performs the business rules mining algorithm on the target project to generate a new set of business rules associated to the BPMN Model. </br> This API launches an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/decision-rules/job-status/{jobKey}).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionRulesRequest"
                },
                "examples": {
                  "success": {
                    "value": {
                      "uid": "user.pm",
                      "ts": "1599831150683",
                      "sign": "dp845Vr9gGVnyeWbPMCrjwX3T/t/otYupuEdcwDSI1w=",
                      "org": "4d725f50",
                      "useCachedRules": false,
                      "updateSettings": false,
                      "dmnOutputVariableName": "outputVariable",
                      "settings": {
                        "BLOCK": false,
                        "CHANGES": true
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Generate and export the business rules for a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/upload": {
        "post": {
          "operationId": "UploadDataSet",
          "description": "This API request uploads a new dataset to an existing project. </br> This API will not automatically refresh the current event log nor the linked snapshots: to include the new dataset in the process analysis you must call the “Generate the Event Log” API. </br> This API will launch an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/csv/job-status/{jobKey}).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "forUpdate",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Project Append/Ovverride (leave it empty for append)",
              "schema": {
                "type": "boolean",
                "default": "true"
              },
              "example": "true"
            },
            {
              "name": "dataSetOverride",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Dataset Append/Ovverride (leave it empty for append)",
              "schema": {
                "type": "boolean",
                "default": "false"
              },
              "example": "false"
            },
            {
              "name": "description",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Dataset description (if empty, dataset description fallbacks to file name)",
              "schema": {
                "type": "string"
              },
              "example": "mydataset"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Upload a data set in a process (Async)",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/upload-model": {
        "post": {
          "operationId": "UploadModel",
          "description": "This API request uploads a reference BPMN model to an existing project. </br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "myprocess",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Upload a reference BPMN model in a process",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/create-log": {
        "post": {
          "operationId": "PerformProcessMining",
          "description": "This API request performs the process mining algorithm on the target project to generate a new event log based on the uploaded data. </br> The “mapping” parameter is optional if the field mapping has already been set by WUI, otherwise it's required.  </br> This API will launch an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/csv/job-status/{jobKey}).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "forUpdate",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Eventlog Append/Ovverride (leave it empty for ovveride)",
              "schema": {
                "type": "boolean",
                "default": "false"
              },
              "example": "true"
            },
            {
              "name": "mapping",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Column Mapping",
              "schema": {
                "type": "string"
              },
              "example": "{\"2\":{\"id\":\"attr-process\",\"mask\":\"\",\"name\":\"PROCESS_ID\"}, \"4\":{\"id\":\"attr-activity\",\"mask\":\"\",\"name\":\"ACTIVITY_CODE\"}, \"5\":{\"id\":\"attr-role\",\"mask\":\"\",\"name\":\"ROLE_CODE\"}, \"9\":{\"id\":\"attr-resource\",\"mask\":\"\",\"name\":\"RESOURCE_CODE\"}, \"10\":{\"id\":\"attr-start-time\",\"mask\":\"dd/MM/yyyy HH:mm:ss\",\"name\":\"START_TIME\"}, \"13\":{\"id\":\"attr-end-time\",\"mask\":\"dd/MM/yyyy HH:mm:ss\",\"name\":\"END_TIME\"}, \"15\":{\"id\":\"attr-custom\",\"mask\":\"\",\"name\":\"END_USER\"}, \"16\":{\"id\":\"attr-custom\",\"mask\":\"\",\"name\":\"END_OUTCOME\"}}"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Generate the event log for a process (Async)",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/reset-log": {
        "post": {
          "operationId": "PerformProjectReset",
          "description": "This API request performs the reset of the target project. </br> This API will launch an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/csv/job-status/{jobKey}).  ",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Reset a project (Async)",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/csv/{projectKey}/trimming": {
        "post": {
          "operationId": "PerformProjectTrimming",
          "description": "This API request performs the trimming of the target project. </br> This API will launch an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the server pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/csv/job-status/{jobKey}).  </br> Please note that an empty body is accepted, but it will not produce any result because no filters are actually provided.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illutsrated in the example.</br> The caseFilters section contains the filters used to select the cases to keep in the project. </br> The entityFilters section contains the filters used to keep a subset of the removed cases. </br> Please note that the filter expression refers the filters array by index, starting by 0. </br> The filters provided in the example will remove all cases including invoices cleared before March 2021 while keeping all purchase orders that are still open.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": {
                  "caseFilters": [
                    {
                      "filterType": "aggregate",
                      "expression": "((0 OR (1 AND NOT 2)) OR (3 AND NOT 1) OR (4 AND NOT 1))",
                      "filters": [
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Invoice Cleared",
                          "startDate": "2021-03-01",
                          "endDate": "2021-03-31"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Invoice Registered"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Invoice Cleared"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "SES Line Registered"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Goods Line Registered"
                        }
                      ]
                    }
                  ],
                  "entityFilters": [
                    {
                      "filterType": "aggregate",
                      "expression": "(0 AND NOT (1 OR 2))",
                      "filters": [
                        {
                          "filterType": "entity",
                          "entityKey": "attr-process-1"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Purchase Order Closed"
                        },
                        {
                          "filterType": "attribute",
                          "attributeKey": "attr-activity",
                          "attributeValue": "Purchase Order Line Deleted"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not found": {
                      "value": {
                        "error": 1002,
                        "data": "Project with name <projectKey> not found in organization <org>",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Trim a process according to parameters (Async)",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/kpi-settings": {
        "get": {
          "operationId": "GetKpiSettings",
          "description": "This API request retrieves a full set of information related to the KPI settings of a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "If the process provided in the URL is a snapshot and the user wants to retrieve the KPI settings of the parent project, set this parameter to `true`.",
              "schema": {
                "type": "boolean"
              },
              "example": "true"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KpiSettingsResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "process": {
                            "kpis": [
                              {
                                "warningThreshold": 1,
                                "criticalThreshold": 8,
                                "warningThresholdUnit": "DAYS",
                                "criticalThresholdUnit": "DAYS",
                                "unitType": "timestamp",
                                "name": "case-throughput"
                              },
                              {
                                "warningThreshold": 0,
                                "criticalThreshold": 0,
                                "warningThresholdUnit": "MONEY",
                                "criticalThresholdUnit": "MONEY",
                                "unitType": "double",
                                "name": "case-cost"
                              }
                            ]
                          },
                          "activities": [
                            {
                              "activityName": "default",
                              "kpis": [
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": 8,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-throughput"
                                },
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": 8,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-duration"
                                },
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": null,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-wait-queue"
                                },
                                {
                                  "warningThreshold": 0.33,
                                  "criticalThreshold": 0.66,
                                  "warningThresholdUnit": "percent",
                                  "criticalThresholdUnit": "percent",
                                  "unitType": "double",
                                  "name": "resource-allocation"
                                }
                              ]
                            },
                            {
                              "activityName": "Goods Receipt Confirmed",
                              "kpis": [
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": 8,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-throughput"
                                },
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": 8,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-duration"
                                },
                                {
                                  "warningThreshold": 1,
                                  "criticalThreshold": null,
                                  "warningThresholdUnit": "DAYS",
                                  "criticalThresholdUnit": "DAYS",
                                  "unitType": "timestamp",
                                  "name": "activity-wait-queue"
                                },
                                {
                                  "warningThreshold": 0.33,
                                  "criticalThreshold": 0.66,
                                  "warningThresholdUnit": "percent",
                                  "criticalThresholdUnit": "percent",
                                  "unitType": "double",
                                  "name": "resource-allocation"
                                }
                              ]
                            }
                          ]
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the KPI settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/model-statistics": {
        "get": {
          "operationId": "RetrieveProcessModel",
          "description": "This API request retrieves the process model with statistics.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessModelResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "model": {
                            "nodes": [
                              {
                                "roles": [],
                                "resources": [],
                                "activityName": "START",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 0,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [
                                  "APPLICANT"
                                ],
                                "resources": [
                                  "MP07B   "
                                ],
                                "activityName": "Request created",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [
                                  "APPLICANT"
                                ],
                                "resources": [
                                  "652"
                                ],
                                "activityName": "Service closure Request with network responsibility",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [
                                  "DIRECTOR"
                                ],
                                "resources": [
                                  "BOC"
                                ],
                                "activityName": "Authorization Requested",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [
                                  "BACK-OFFICE"
                                ],
                                "resources": [
                                  "BOC"
                                ],
                                "activityName": "Service closure Request with BO responsibility",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [
                                  "BACK-OFFICE"
                                ],
                                "resources": [
                                  "BOC"
                                ],
                                "activityName": "Pending Request for Reservation Closure",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              },
                              {
                                "roles": [],
                                "resources": [],
                                "activityName": "STOP",
                                "statistics": {
                                  "caseRepetition": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 0,
                                  "totalStandardCost": 0,
                                  "avgDuration": 0,
                                  "totalResourceCost": 0,
                                  "medianDuration": 0,
                                  "automation": 0,
                                  "entityName": "",
                                  "overallCost": 0,
                                  "avgRepetition": 0,
                                  "maxDuration": 0
                                }
                              }
                            ],
                            "edges": [
                              {
                                "sourceActivity": "START",
                                "targetActivity": "Request created",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              },
                              {
                                "sourceActivity": "Request created",
                                "targetActivity": "Service closure Request with network responsibility",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              },
                              {
                                "sourceActivity": "Service closure Request with network responsibility",
                                "targetActivity": "Authorization Requested",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              },
                              {
                                "sourceActivity": "Authorization Requested",
                                "targetActivity": "Service closure Request with BO responsibility",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              },
                              {
                                "sourceActivity": "Service closure Request with BO responsibility",
                                "targetActivity": "Pending Request for Reservation Closure",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              },
                              {
                                "sourceActivity": "Pending Request for Reservation Closure",
                                "targetActivity": "STOP",
                                "statistics": {
                                  "parallelFrequency": 0,
                                  "caseRepetition": 0,
                                  "medianDuration": 0,
                                  "minDuration": 0,
                                  "cost": 0,
                                  "frequency": 1,
                                  "avgRepetition": 0,
                                  "overallCost": 0,
                                  "maxDuration": 0,
                                  "avgDuration": 0
                                }
                              }
                            ],
                            "activitiesAfterStart": [
                              "Request created"
                            ]
                          },
                          "processAnalysis": {
                            "duration": 0,
                            "filteredCases": 1,
                            "filteredEvents": 5,
                            "minThroughputTime": 3828932000,
                            "maxThroughputTime": 3828932000,
                            "avgThroughputTime": 3828932000,
                            "stdThroughputTime": 0,
                            "medianThroughputTime": 3828932000,
                            "minRunningThroughputTime": 0,
                            "maxRunningThroughputTime": 0,
                            "avgRunningThroughputTime": 0,
                            "stdRunningThroughputTime": 0,
                            "minCompletedThroughputTime": 3828932000,
                            "maxCompletedThroughputTime": 3828932000,
                            "avgCompletedThroughputTime": 3828932000,
                            "stdCompletedThroughputTime": 0,
                            "minArrivalRate": 1,
                            "maxArrivalRate": 1,
                            "avgArrivalRate": 1,
                            "resources": [
                              "652",
                              "MP07B   ",
                              "BOC"
                            ],
                            "roles": [
                              "APPLICANT",
                              "DIRECTOR",
                              "BACK-OFFICE"
                            ],
                            "minTime": 1506932889000,
                            "maxTime": 1510761821000,
                            "totalCases": 1,
                            "totalEvents": 5,
                            "activityNames": [
                              "Pending Request for Reservation Closure",
                              "Authorization Requested",
                              "Service closure Request with network responsibility",
                              "Request created",
                              "Service closure Request with BO responsibility"
                            ]
                          }
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the model statistics of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "ComputeStatisticsApplyingTransientFilter",
          "description": "This API request applies a transient filters to the process before retrieving the model statistics; it returns a jobId to get the results once the processing is completed (Async).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illustrated in the example.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFilters"
                },
                "example": [
                  {
                    "filterType": "attribute",
                    "label": "Activity is \"Goods Received\"",
                    "attributeValue": "Goods Received",
                    "attributeKey": "process",
                    "matchCases": true,
                    "timeSpanFrom": "2017-01-13",
                    "matchingRule": "ANY",
                    "timeSpanTo": "2022-01-13",
                    "operator": "LT",
                    "timeUnit": "DAYS",
                    "timeValue": 1,
                    "inclusiveTimeSpan": true
                  },
                  {
                    "filterType": "kpi",
                    "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                    "kpis": [
                      "service-range",
                      "waittime-range"
                    ],
                    "retainCritical": false
                  },
                  {
                    "filterType": "pattern",
                    "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                    "attributeKey": "activity",
                    "pattern": "<Invoice Check>.*<Goods Check>",
                    "matchCases": true,
                    "matchingRule": "ANY",
                    "operator": "LT",
                    "timeValue": 4,
                    "timeUnit": "DAYS"
                  },
                  {
                    "filterType": "outliers",
                    "label": "Include Outliers",
                    "matchCases": true,
                    "includeServiceTime": true,
                    "includeWaitTime": true,
                    "includeLeadTime": true,
                    "range": "both",
                    "activity": null,
                    "outlierLevel": 2.5
                  },
                  {
                    "filterType": "parallelism",
                    "label": "Include parallelism between Invoice Check and Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "relation",
                    "label": "Invoice Check directly follows Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "rework",
                    "label": "Rework of Invoice Check",
                    "sourceActivity": "Invoice Check",
                    "matchCases": true
                  },
                  {
                    "filterType": "throughput",
                    "label": "Case lead time under 86400000 MILLISECONDS",
                    "operator": "LTE",
                    "timeUnit": "MILLISECONDS",
                    "timeValue": 86400000,
                    "matchCases": true
                  },
                  {
                    "filterType": "timespan",
                    "label": "from Sep 14, 2016 until Sep 15, 2016",
                    "startTime": "2016-09-14T00:00:00Z",
                    "endTime": "2016-09-14T23:59:59Z",
                    "inclusiveTimeSpan": false,
                    "matchCases": true
                  },
                  {
                    "filterType": "variant",
                    "variant": "1578805807",
                    "label": "NewVariant",
                    "matchCases": true
                  },
                  {
                    "filterType": "running",
                    "label": "Exclude running cases",
                    "excludeCases": "running"
                  },
                  {
                    "filterType": "simulation",
                    "label": "Exclude simulated cases",
                    "excludeCases": "simulated"
                  },
                  {
                    "filterType": "conformant",
                    "label": "Exclude non conformant cases",
                    "excludeCases": "nonConformance"
                  },
                  {
                    "filterType": "customMetric",
                    "label": "metricName = Pending Liquidation Request",
                    "customMetricName": "metricName",
                    "operator": "E",
                    "customMetricValue": "Pending Liquidation Request",
                    "matchCases": true
                  }
                ]
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Relative URL to retrieve the job status",
                  "schema": {
                    "type": "string",
                    "format": "uri",
                    "example": "/integration/jobs/343jnnfg8u34u38u53"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFilterJobResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilter"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply transient filters before retrieving the model statistics of a process (Async).",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/jobs/model-statistics/{jobId}": {
        "get": {
          "operationId": "RetrieveProcessModelStatsByJobId",
          "description": "This API request retrieves statistics of the process model related to a jobId.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "data": {
                        "$ref": "#/components/schemas/ProcessModel"
                      },
                      "status": {
                        "$ref": "#/components/schemas/JobStatus"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Retrieve statistics of the process model related to a jobId.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/processes/{projectKey}/activity-statistics/{activityName}": {
        "get": {
          "operationId": "RetrievePerformanceForSingleActivity",
          "description": "This API request retrieves performance statistics related to a single activity inside a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/activityName"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "roles": [
                            "DIRECTOR"
                          ],
                          "resources": [
                            "BOC"
                          ],
                          "activityName": "Authorization Requested",
                          "statistics": {
                            "caseRepetition": 0,
                            "minDuration": 0,
                            "cost": 0,
                            "frequency": 1,
                            "totalStandardCost": 0,
                            "avgDuration": 0,
                            "totalResourceCost": 0,
                            "medianDuration": 0,
                            "automation": 0,
                            "entityName": "",
                            "overallCost": 0,
                            "avgRepetition": 0,
                            "maxDuration": 0
                          }
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/ActivityNotFound"
            }
          },
          "summary": "Get the performance statistics of a single activity inside a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "RetrieveActivityApplyingTransientFilter",
          "description": "This API request applies transient filters before retrieving the performance statistics related to a single activity inside a process; it returns a jobId to get the results once the processing is completed (Async).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/activityName"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illutsrated in the example.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFilters"
                },
                "example": [
                  {
                    "filterType": "attribute",
                    "label": "Activity is \"Goods Received\"",
                    "attributeValue": "Goods Received",
                    "attributeKey": "process",
                    "matchCases": true,
                    "timeSpanFrom": "2017-01-13",
                    "matchingRule": "ANY",
                    "timeSpanTo": "2022-01-13",
                    "operator": "LT",
                    "timeUnit": "DAYS",
                    "timeValue": 1,
                    "inclusiveTimeSpan": true
                  },
                  {
                    "filterType": "kpi",
                    "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                    "kpis": [
                      "service-range",
                      "waittime-range"
                    ],
                    "retainCritical": false
                  },
                  {
                    "filterType": "pattern",
                    "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                    "attributeKey": "activity",
                    "pattern": "<Invoice Check>.*<Goods Check>",
                    "matchCases": true,
                    "matchingRule": "ANY",
                    "operator": "LT",
                    "timeValue": 4,
                    "timeUnit": "DAYS"
                  },
                  {
                    "filterType": "outliers",
                    "label": "Include Outliers",
                    "matchCases": true,
                    "includeServiceTime": true,
                    "includeWaitTime": true,
                    "includeLeadTime": true,
                    "range": "both",
                    "activity": null,
                    "outlierLevel": 2.5
                  },
                  {
                    "filterType": "parallelism",
                    "label": "Include parallelism between Invoice Check and Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "relation",
                    "label": "Invoice Check directly follows Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "rework",
                    "label": "Rework of Invoice Check",
                    "sourceActivity": "Invoice Check",
                    "matchCases": true
                  },
                  {
                    "filterType": "throughput",
                    "label": "Case lead time under 86400000 MILLISECONDS",
                    "operator": "LTE",
                    "timeUnit": "MILLISECONDS",
                    "timeValue": 86400000,
                    "matchCases": true
                  },
                  {
                    "filterType": "timespan",
                    "label": " from Sep 14, 2016 until Sep 15, 2016",
                    "startTime": "2016-09-14T00:00:00Z",
                    "endTime": "2016-09-14T23:59:59Z",
                    "inclusiveTimeSpan": false,
                    "matchCases": true
                  },
                  {
                    "filterType": "variant",
                    "variant": "1578805807",
                    "label": "NewVariant",
                    "matchCases": true
                  },
                  {
                    "filterType": "running",
                    "label": "Exclude running cases",
                    "excludeCases": "running"
                  },
                  {
                    "filterType": "simulation",
                    "label": "Exclude simulated cases",
                    "excludeCases": "simulated"
                  },
                  {
                    "filterType": "conformant",
                    "label": "Exclude non conformant cases",
                    "excludeCases": "nonConformance"
                  },
                  {
                    "filterType": "customMetric",
                    "label": "metricName = Pending Liquidation Request",
                    "customMetricName": "metricName",
                    "operator": "E",
                    "customMetricValue": "Pending Liquidation Request",
                    "matchCases": true
                  }
                ]
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Relative URL to retrieve the job status",
                  "schema": {
                    "type": "string",
                    "format": "uri",
                    "example": "/integration/jobs/343jnnfg8u34u38u53"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFilterJobResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilter"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply transient filters before retrieving the performance statistics related to a single activity inside a process (Async).",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/relation-statistics": {
        "get": {
          "operationId": "RetrievePerformanceForRelation",
          "description": "This API request retrieves the performance statistics related to activity relations inside a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/startActivity"
            },
            {
              "$ref": "#/components/parameters/endActivity"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "sourceActivity": "START",
                            "targetActivity": "Request created12",
                            "statistics": {
                              "parallelFrequency": 0,
                              "caseRepetition": 0,
                              "medianDuration": 0,
                              "minDuration": 0,
                              "cost": 0,
                              "frequency": 1,
                              "avgRepetition": 0,
                              "overallCost": 0,
                              "maxDuration": 0,
                              "avgDuration": 0
                            }
                          },
                          {
                            "sourceActivity": "Pending request for Reservation Closure",
                            "targetActivity": "STOP",
                            "statistics": {
                              "parallelFrequency": 0,
                              "caseRepetition": 0,
                              "medianDuration": 0,
                              "minDuration": 0,
                              "cost": 0,
                              "frequency": 1,
                              "avgRepetition": 0,
                              "overallCost": 0,
                              "maxDuration": 0,
                              "avgDuration": 0
                            }
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the performance statistics of activity relations inside a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "RetrieveRelationApplyingTransientFilter",
          "description": "This API request applies transient filters to the process before retrieving the activity relations statistics; it returns a jobId to get the results once the processing is completed (Async).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/startActivity"
            },
            {
              "$ref": "#/components/parameters/endActivity"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illutsrated in the example.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFilters"
                },
                "example": [
                  {
                    "filterType": "attribute",
                    "label": "Activity is \"Goods Received\"",
                    "attributeValue": "Goods Received",
                    "attributeKey": "process",
                    "matchCases": true,
                    "timeSpanFrom": "2017-01-13",
                    "matchingRule": "ANY",
                    "timeSpanTo": "2022-01-13",
                    "operator": "LT",
                    "timeUnit": "DAYS",
                    "timeValue": 1,
                    "inclusiveTimeSpan": true
                  },
                  {
                    "filterType": "kpi",
                    "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                    "kpis": [
                      "service-range",
                      "waittime-range"
                    ],
                    "retainCritical": false
                  },
                  {
                    "filterType": "pattern",
                    "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                    "attributeKey": "activity",
                    "pattern": "<Invoice Check>.*<Goods Check>",
                    "matchCases": true,
                    "matchingRule": "ANY",
                    "operator": "LT",
                    "timeValue": 4,
                    "timeUnit": "DAYS"
                  },
                  {
                    "filterType": "outliers",
                    "label": "Include Outliers",
                    "matchCases": true,
                    "includeServiceTime": true,
                    "includeWaitTime": true,
                    "includeLeadTime": true,
                    "range": "both",
                    "activity": null,
                    "outlierLevel": 2.5
                  },
                  {
                    "filterType": "parallelism",
                    "label": "Include parallelism between Invoice Check and Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "relation",
                    "label": "Invoice Check directly follows Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "rework",
                    "label": "Rework of Invoice Check",
                    "sourceActivity": "Invoice Check",
                    "matchCases": true
                  },
                  {
                    "filterType": "throughput",
                    "label": "Case lead time under 86400000 MILLISECONDS",
                    "operator": "LTE",
                    "timeUnit": "MILLISECONDS",
                    "timeValue": 86400000,
                    "matchCases": true
                  },
                  {
                    "filterType": "timespan",
                    "label": " from Sep 14, 2016 until Sep 15, 2016",
                    "startTime": "2016-09-14T00:00:00Z",
                    "endTime": "2016-09-14T23:59:59Z",
                    "inclusiveTimeSpan": false,
                    "matchCases": true
                  },
                  {
                    "filterType": "variant",
                    "variant": "1578805807",
                    "label": "NewVariant",
                    "matchCases": true
                  },
                  {
                    "filterType": "running",
                    "label": "Exclude running cases",
                    "excludeCases": "running"
                  },
                  {
                    "filterType": "simulation",
                    "label": "Exclude simulated cases",
                    "excludeCases": "simulated"
                  },
                  {
                    "filterType": "conformant",
                    "label": "Exclude non conformant cases",
                    "excludeCases": "nonConformance"
                  },
                  {
                    "filterType": "customMetric",
                    "label": "metricName = Pending Liquidation Request",
                    "customMetricName": "metricName",
                    "operator": "E",
                    "customMetricValue": "Pending Liquidation Request",
                    "matchCases": true
                  }
                ]
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Relative URL to retrieve the job status",
                  "schema": {
                    "type": "string",
                    "format": "uri",
                    "example": "/integration/jobs/343jnnfg8u34u38u53"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFilterJobResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilter"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply transient filters before retrieving the activity relations statistics of a process (Async).",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/deviations": {
        "get": {
          "operationId": "GetDeviations",
          "description": "This API request retrieves the deviations of a derived model from the reference model of a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/DeviationResponse"
                        }
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "deviationType": "INSERTED_ACTIVITY",
                            "activityName": "Invoice Blocked :AP- Credit note reqd",
                            "caseCount": 2,
                            "caseRatio": 0.0012322858903265558,
                            "steps": 18,
                            "throughput": 8983032500,
                            "cost": 133
                          },
                          {
                            "deviationType": "INSERTED_START_ACTIVITY",
                            "caseCount": 74,
                            "caseRatio": 0.0006082925064939336,
                            "cost": 25.00337837837838,
                            "activityName": "Invoice Cleared",
                            "steps": 3.0405405405405412,
                            "throughput": 75924196283.78378
                          },
                          {
                            "deviationType": "INSERTED_RELATION",
                            "startActivity": "Purchase Requisition Line Deleted",
                            "endActivity": "Requisition RFQ/purchase order.",
                            "caseCount": 133,
                            "caseRatio": 0.08194701170671596,
                            "steps": 13.699248120300753,
                            "throughput": 3520666842.1052628,
                            "cost": 129.5827067669173
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/ReferenceModelNotFound"
            }
          },
          "summary": "Get the deviations from the reference model of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "GetDeviationsApplyingTransientFilter",
          "description": "This API request applies transient filters before retrieving the deviations from the reference model of a process; it returns a jobId to get the results once the processing is completed (Async).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illustrated in the example.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFilters"
                },
                "example": [
                  {
                    "filterType": "attribute",
                    "label": "Activity is \"Goods Received\"",
                    "attributeValue": "Goods Received",
                    "attributeKey": "process",
                    "matchCases": true,
                    "timeSpanFrom": "2017-01-13",
                    "matchingRule": "ANY",
                    "timeSpanTo": "2022-01-13",
                    "operator": "LT",
                    "timeUnit": "DAYS",
                    "timeValue": 1,
                    "inclusiveTimeSpan": true
                  },
                  {
                    "filterType": "kpi",
                    "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                    "kpis": [
                      "service-range",
                      "waittime-range"
                    ],
                    "retainCritical": false
                  },
                  {
                    "filterType": "pattern",
                    "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                    "attributeKey": "activity",
                    "pattern": "<Invoice Check>.*<Goods Check>",
                    "matchCases": true,
                    "matchingRule": "ANY",
                    "operator": "LT",
                    "timeValue": 4,
                    "timeUnit": "DAYS"
                  },
                  {
                    "filterType": "outliers",
                    "label": "Include Outliers",
                    "matchCases": true,
                    "includeServiceTime": true,
                    "includeWaitTime": true,
                    "includeLeadTime": true,
                    "range": "both",
                    "activity": null,
                    "outlierLevel": 2.5
                  },
                  {
                    "filterType": "parallelism",
                    "label": "Include parallelism between Invoice Check and Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "relation",
                    "label": "Invoice Check directly follows Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "rework",
                    "label": "Rework of Invoice Check",
                    "sourceActivity": "Invoice Check",
                    "matchCases": true
                  },
                  {
                    "filterType": "throughput",
                    "label": "Case lead time under 86400000 MILLISECONDS",
                    "operator": "LTE",
                    "timeUnit": "MILLISECONDS",
                    "timeValue": 86400000,
                    "matchCases": true
                  },
                  {
                    "filterType": "timespan",
                    "label": "from Sep 14, 2016 until Sep 15, 2016",
                    "startTime": "2016-09-14T00:00:00Z",
                    "endTime": "2016-09-14T23:59:59Z",
                    "inclusiveTimeSpan": false,
                    "matchCases": true
                  },
                  {
                    "filterType": "variant",
                    "variant": "1578805807",
                    "label": "NewVariant",
                    "matchCases": true
                  },
                  {
                    "filterType": "running",
                    "label": "Exclude running cases",
                    "excludeCases": "running"
                  },
                  {
                    "filterType": "simulation",
                    "label": "Exclude simulated cases",
                    "excludeCases": "simulated"
                  },
                  {
                    "filterType": "conformant",
                    "label": "Exclude non conformant cases",
                    "excludeCases": "nonConformance"
                  },
                  {
                    "filterType": "customMetric",
                    "label": "metricName = Pending Liquidation Request",
                    "customMetricName": "metricName",
                    "operator": "E",
                    "customMetricValue": "Pending Liquidation Request",
                    "matchCases": true
                  }
                ]
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Relative URL to retrieve the job status",
                  "schema": {
                    "type": "string",
                    "format": "uri",
                    "example": "/integration/jobs/343jnnfg8u34u38u53"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFilterJobResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilter"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply transient filters before retrieving the deviations from the reference model of a process (Async).",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/filters": {
        "get": {
          "operationId": "GetFilters",
          "description": "This API request retrieves the set of filters applied to a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/TransientFilter"
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "filters": [
                            {
                              "filterType": "attribute",
                              "label": "Activity is \"Goods Received\"",
                              "attributeValue": "Goods Received",
                              "attributeKey": "process",
                              "matchCases": true,
                              "timeSpanFrom": "2017-01-13",
                              "matchingRule": "ANY",
                              "timeSpanTo": "2022-01-13",
                              "operator": "LT",
                              "timeUnit": "DAYS",
                              "timeValue": 1,
                              "inclusiveTimeSpan": true
                            },
                            {
                              "filterType": "kpi",
                              "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                              "kpis": [
                                "service-range",
                                "waittime-range"
                              ],
                              "retainCritical": false
                            },
                            {
                              "filterType": "pattern",
                              "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                              "attributeKey": "activity",
                              "pattern": "<Invoice Check>.*<Goods Check>",
                              "matchCases": true,
                              "matchingRule": "ANY",
                              "operator": "LT",
                              "timeValue": 4,
                              "timeUnit": "DAYS"
                            },
                            {
                              "filterType": "outliers",
                              "label": "Include Outliers",
                              "matchCases": true,
                              "includeServiceTime": true,
                              "includeWaitTime": true,
                              "includeLeadTime": true,
                              "range": "both",
                              "activity": null,
                              "outlierLevel": 2.5
                            },
                            {
                              "filterType": "parallelism",
                              "label": "Include parallelism between Invoice Check and Wait",
                              "sourceActivity": "Invoice Check",
                              "targetActivity": "Wait",
                              "matchCases": true
                            },
                            {
                              "filterType": "relation",
                              "label": "Invoice Check directly follows Wait",
                              "sourceActivity": "Invoice Check",
                              "targetActivity": "Wait",
                              "matchCases": true
                            },
                            {
                              "filterType": "rework",
                              "label": "Rework of Invoice Check",
                              "sourceActivity": "Invoice Check",
                              "matchCases": true
                            },
                            {
                              "filterType": "throughput",
                              "label": "Case lead time under 86400000 MILLISECONDS",
                              "operator": "LTE",
                              "timeUnit": "MILLISECONDS",
                              "timeValue": 86400000,
                              "matchCases": true
                            },
                            {
                              "filterType": "timespan",
                              "label": "from Sep 14, 2016 until Sep 15, 2016",
                              "startTime": "2016-09-14T00:00:00Z",
                              "endTime": "2016-09-14T23:59:59Z",
                              "inclusiveTimeSpan": false,
                              "matchCases": true
                            },
                            {
                              "filterType": "variant",
                              "variant": "1578805807",
                              "label": "NewVariant",
                              "matchCases": true
                            },
                            {
                              "filterType": "running",
                              "label": "Exclude running cases",
                              "excludeCases": "running"
                            },
                            {
                              "filterType": "simulation",
                              "label": "Exclude simulated cases",
                              "excludeCases": "simulated"
                            },
                            {
                              "filterType": "conformant",
                              "label": "Exclude non conformant cases",
                              "excludeCases": "nonConformance"
                            },
                            {
                              "filterType": "customMetric",
                              "matchCases": true,
                              "label": "metricName = Pending Liquidation Request",
                              "customMetricName": "metricName",
                              "customMetricDataType": "STRING",
                              "operator": "E",
                              "customMetricValue": "Pending Liquidation Request"
                            }
                          ]
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the set of filters applied to a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/projects/{projectKey}/filter-templates": {
        "get": {
          "operationId": "RetrieveFilterTemplates",
          "description": "This API request retrieves the filter templates in a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetFilterTemplates"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilterTemplate"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get filter templates.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/kpi-status": {
        "get": {
          "operationId": "RetrievekpiMismatch",
          "description": "This API request retrieves the statistics of activities/relations that have exceeded the KPI thresholds in a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/measure"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KpiMismatchResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "nodes": [
                            {
                              "roles": [
                                "DIRECTOR"
                              ],
                              "resources": [
                                "BOC"
                              ],
                              "kpiStatus": "warning",
                              "activityName": "Authorization Requested",
                              "statistics": {
                                "caseRepetition": 0,
                                "minDuration": 0,
                                "cost": 0,
                                "frequency": 1,
                                "totalStandardCost": 0,
                                "avgDuration": 0,
                                "totalResourceCost": 0,
                                "medianDuration": 0,
                                "automation": 0,
                                "entityName": "",
                                "overallCost": 0,
                                "avgRepetition": 0,
                                "maxDuration": 0
                              }
                            },
                            {
                              "roles": [
                                "DIRECTOR"
                              ],
                              "resources": [
                                "BOC"
                              ],
                              "kpiStatus": "critical",
                              "activityName": "Request created",
                              "statistics": {
                                "caseRepetition": 0,
                                "minDuration": 0,
                                "cost": 0,
                                "frequency": 1,
                                "totalStandardCost": 0,
                                "avgDuration": 0,
                                "totalResourceCost": 0,
                                "medianDuration": 0,
                                "automation": 0,
                                "entityName": "",
                                "overallCost": 0,
                                "avgRepetition": 0,
                                "maxDuration": 0
                              }
                            }
                          ],
                          "edges": [
                            {
                              "kpiStatus": "critical",
                              "sourceActivity": "START",
                              "targetActivity": "Request created12",
                              "statistics": {
                                "parallelFrequency": 0,
                                "caseRepetition": 0,
                                "medianDuration": 0,
                                "minDuration": 1,
                                "cost": 0,
                                "frequency": 1,
                                "avgRepetition": 0,
                                "overallCost": 0,
                                "maxDuration": 0,
                                "avgDuration": 0
                              }
                            },
                            {
                              "kpiStatus": "warning",
                              "sourceActivity": "Pending request for Reservation Closure",
                              "targetActivity": "STOP",
                              "statistics": {
                                "parallelFrequency": 0,
                                "caseRepetition": 0,
                                "medianDuration": 0,
                                "minDuration": 1,
                                "cost": 0,
                                "frequency": 1,
                                "avgRepetition": 0,
                                "overallCost": 0,
                                "maxDuration": 0,
                                "avgDuration": 0
                              }
                            }
                          ]
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "500": {
              "$ref": "#/components/responses/ErrorKpiMismatch"
            }
          },
          "summary": "Get statistics of activities/relations that have exceeded the KPI thresholds in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "RetrieveKpiMismatchApplyingTransientFilter",
          "description": "This API request applies transient filters to the process before retrieving the activities/relations that have exceeded the KPI threshold; it returns a jobId to get the results once the processing is completed (Async).",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/measure"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a json object like the one illutsrated in the example.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFilters"
                },
                "example": [
                  {
                    "filterType": "attribute",
                    "label": "Activity is \"Goods Received\"",
                    "attributeValue": "Goods Received",
                    "attributeKey": "process",
                    "matchCases": true,
                    "timeSpanFrom": "2017-01-13",
                    "matchingRule": "ANY",
                    "timeSpanTo": "2022-01-13",
                    "operator": "LT",
                    "timeUnit": "DAYS",
                    "timeValue": 1,
                    "inclusiveTimeSpan": true
                  },
                  {
                    "filterType": "kpi",
                    "label": "Retain cases within KPI boundaries (Activity wait time,Activity service time)",
                    "kpis": [
                      "service-range",
                      "waittime-range"
                    ],
                    "retainCritical": false
                  },
                  {
                    "filterType": "pattern",
                    "label": "<Invoice Check>.*<Goods Check> path time under 4 days",
                    "attributeKey": "activity",
                    "pattern": "<Invoice Check>.*<Goods Check>",
                    "matchCases": true,
                    "matchingRule": "ANY",
                    "operator": "LT",
                    "timeValue": 4,
                    "timeUnit": "DAYS"
                  },
                  {
                    "filterType": "outliers",
                    "label": "Include Outliers",
                    "matchCases": true,
                    "includeServiceTime": true,
                    "includeWaitTime": true,
                    "includeLeadTime": true,
                    "range": "both",
                    "activity": null,
                    "outlierLevel": 2.5
                  },
                  {
                    "filterType": "parallelism",
                    "label": "Include parallelism between Invoice Check and Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "relation",
                    "label": "Invoice Check directly follows Wait",
                    "sourceActivity": "Invoice Check",
                    "targetActivity": "Wait",
                    "matchCases": true
                  },
                  {
                    "filterType": "rework",
                    "label": "Rework of Invoice Check",
                    "sourceActivity": "Invoice Check",
                    "matchCases": true
                  },
                  {
                    "filterType": "throughput",
                    "label": "Case lead time under 86400000 MILLISECONDS",
                    "operator": "LTE",
                    "timeUnit": "MILLISECONDS",
                    "timeValue": 86400000,
                    "matchCases": true
                  },
                  {
                    "filterType": "timespan",
                    "label": "from Sep 14, 2016 until Sep 15, 2016",
                    "startTime": "2016-09-14T00:00:00Z",
                    "endTime": "2016-09-14T23:59:59Z",
                    "inclusiveTimeSpan": false,
                    "matchCases": true
                  },
                  {
                    "filterType": "variant",
                    "variant": "1578805807",
                    "label": "NewVariant",
                    "matchCases": true
                  },
                  {
                    "filterType": "running",
                    "label": "Exclude running cases",
                    "excludeCases": "running"
                  },
                  {
                    "filterType": "simulation",
                    "label": "Exclude simulated cases",
                    "excludeCases": "simulated"
                  },
                  {
                    "filterType": "conformant",
                    "label": "Exclude non conformant cases",
                    "excludeCases": "nonConformance"
                  },
                  {
                    "filterType": "customMetric",
                    "label": "metricName = Pending Liquidation Request",
                    "customMetricName": "metricName",
                    "operator": "E",
                    "customMetricValue": "Pending Liquidation Request",
                    "matchCases": true
                  }
                ]
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Relative URL to retrieve the job status",
                  "schema": {
                    "type": "string",
                    "format": "uri",
                    "example": "/integration/jobs/343jnnfg8u34u38u53"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFilterJobResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForFilter"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Apply transient filters before retrieving the statistics of activities/relations that have exceeded the KPI thresholds in a process (Async).",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/jobs/kpi-status/{jobId}": {
        "get": {
          "operationId": "RetrieveKpiMismatchByJobId",
          "description": "This API request retrieves statistics of the jobId-linked activities/relations that have exceeded the KPI thresholds in a process model by applying the transient filters on top of the persistent filters.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobKpiMismatchResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "500": {
              "$ref": "#/components/responses/ErrorKpiMismatch"
            }
          },
          "summary": "Retrieve statistics of the jobId-based activities/relations that have exceeded the KPI thresholds in a process model.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/jobs/activity-statistics/{jobId}": {
        "get": {
          "operationId": "RetrievePerformanceForSingleActivityByJobId",
          "description": "This API request retrieves performance statistics of a single activity by applying the transient filter on top of the persistent filters based on the provided jobId.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Node"
                      },
                      "status": {
                        "$ref": "#/components/schemas/JobStatus"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/ActivityNotFound"
            }
          },
          "summary": "Retrieve the performance statistics of the jobId-linked single activity using the transient filters.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/jobs/relation-statistics/{jobId}": {
        "get": {
          "operationId": "RetrievePerformanceForRelationByJobId",
          "description": "This API request retrieves performance statistics of the activity relations by applying the transient filter on top of the persistent filters based on the provided jobId.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "data": {
                        "items": {
                          "$ref": "#/components/schemas/Edge"
                        },
                        "type": "array"
                      },
                      "status": {
                        "$ref": "#/components/schemas/JobStatus"
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "sourceActivity": "START",
                            "targetActivity": "Request created12",
                            "statistics": {
                              "parallelFrequency": 0,
                              "caseRepetition": 0,
                              "medianDuration": 0,
                              "minDuration": 1,
                              "cost": 0,
                              "frequency": 1,
                              "avgRepetition": 0,
                              "overallCost": 0,
                              "maxDuration": 0,
                              "avgDuration": 0
                            }
                          },
                          {
                            "sourceActivity": "Pending request for Reservation Closure",
                            "targetActivity": "STOP",
                            "statistics": {
                              "parallelFrequency": 0,
                              "caseRepetition": 0,
                              "medianDuration": 0,
                              "minDuration": 1,
                              "cost": 0,
                              "frequency": 1,
                              "avgRepetition": 0,
                              "overallCost": 0,
                              "maxDuration": 0,
                              "avgDuration": 0
                            }
                          }
                        ],
                        "status": "complete",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/EdgeNotFound"
            }
          },
          "summary": "Retrieve the performance statistics of the jobId-linked activity relations using the transient filters.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/jobs/deviations/{jobId}": {
        "get": {
          "operationId": "RetrieveDeviationsByJobId",
          "description": "This API request retrieves deviations of a derived model from the reference model of a project related to a jobId.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/DeviationResponse"
                        }
                      },
                      "status": {
                        "$ref": "#/components/schemas/JobStatus"
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "deviationType": "INSERTED_ACTIVITY",
                            "activityName": "Invoice Blocked :AP- Credit note reqd",
                            "caseCount": 2,
                            "caseRatio": 0.0012322858903265558,
                            "steps": 18,
                            "throughput": 8983032500,
                            "cost": 133
                          },
                          {
                            "deviationType": "INSERTED_START_ACTIVITY",
                            "caseCount": 74,
                            "caseRatio": 0.0006082925064939336,
                            "cost": 25.00337837837838,
                            "activityName": "Invoice Cleared",
                            "steps": 3.0405405405405412,
                            "throughput": 75924196283.78378
                          },
                          {
                            "deviationType": "INSERTED_RELATION",
                            "startActivity": "Purchase Requisition Line Deleted",
                            "endActivity": "Requisition RFQ/purchase order.",
                            "caseCount": 133,
                            "caseRatio": 0.08194701170671596,
                            "steps": 13.699248120300753,
                            "throughput": 3520666842.1052628,
                            "cost": 129.5827067669173
                          }
                        ],
                        "status": "complete",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/ReferenceModelNotFound"
            }
          },
          "summary": "Retrieve deviations of a derived model from the reference model of a project related to a jobId.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/analytics/integration/jobs/query/{jobId}": {
        "get": {
          "operationId": "GetAnalyticsQueryResults",
          "description": "This API request retrieves the SQL query results from the Advanced Analytics component in IBM Process Mining.",
          "parameters": [
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          [
                            "Invoice Due Date Passed",
                            [
                              7285
                            ],
                            713621
                          ],
                          [
                            "Invoice Deleted",
                            [
                              1650
                            ],
                            713621
                          ],
                          [
                            "Invoice Cleared",
                            [
                              667482
                            ],
                            713621
                          ],
                          [
                            "Invoice Send Payment",
                            [
                              667482
                            ],
                            713621
                          ],
                          [
                            "Invoice Registered",
                            [
                              713621
                            ],
                            713621
                          ],
                          [
                            "Invoice Vendor Creation",
                            [
                              713617
                            ],
                            713621
                          ]
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Retrieves the sql query results related to a jobId.",
          "tags": [
            "Job Control"
          ]
        }
      },
      "/integration/processes/{projectKey}/variants": {
        "get": {
          "operationId": "GetVariants",
          "description": "This API request retrieves statistics and details of the Case variants.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/page"
            },
            {
              "$ref": "#/components/parameters/size"
            },
            {
              "$ref": "#/components/parameters/attributeKey"
            },
            {
              "$ref": "#/components/parameters/sortBy"
            },
            {
              "$ref": "#/components/parameters/order"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/VariantDetails"
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "items": [
                            {
                              "steps": 7,
                              "id": 1623739350,
                              "frequency": 1,
                              "subProcessFrequency": 0,
                              "ratio": 0.00002182214948172395,
                              "avgDuration": 202903555000,
                              "activityNames": [
                                "Line Creation",
                                "Document released for credit",
                                "Header Block Removed",
                                "LgstCheckOnConfDat Removed",
                                "Delivery",
                                "Good Issue",
                                "LgstCheckOnConfDat Set"
                              ],
                              "minTime": 1453148642000,
                              "maxTime": 1656052197000,
                              "totalCost": 21.5,
                              "avgCost": 21.5,
                              "subProcess": "process-1"
                            }
                          ],
                          "totalElements": 1448,
                          "pageSize": 1,
                          "pageIndex": 0
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForVariants"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get statistics of the case variants present in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/custom-metrics": {
        "get": {
          "operationId": "GetCustomMetrics",
          "description": "This API request retrieves the details of the custom metrics in a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomMetricDetails"
                        }
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get details of the custom metrics in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/status": {
        "get": {
          "operationId": "GetProjectStatus",
          "description": "This API request retrieves process mining status details for a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/ProjectStatusDetails"
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "status": "READY",
                          "message": "Event log updated on 2022-11-15T09:07:57.051Z"
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get process mining status details for a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings": {
        "get": {
          "operationId": "GetProjectGeneralSettings",
          "description": "This API request retrieves the information related to the general settings of a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneralSettingsResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the general project settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "patch": {
          "operationId": "editProjectGeneralSettings",
          "description": "This API request updates the information related to the general settings of a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a key value pair of general project settings.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneralSettingsResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Edit the general project settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/activities-cost": {
        "get": {
          "operationId": "GetActivityCost",
          "description": "This API request retrieves the activity cost settings of the process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the activity cost settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/activities-cost/{activity-name}": {
        "get": {
          "operationId": "GetActivityCostForAnActivity",
          "description": "This API request retrieves the activity cost settings for an activity that is provided in the request.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the activity cost settings for an activity in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "editActivityCost",
          "description": "This API request adds or edits the cost of an activity.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a key value pair for the activity cost.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCost"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Add or edit the activity cost of a project",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "deleteActivityCost",
          "description": "This API request deletes the cost for an activity.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete the activity cost of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/activities-working-time": {
        "get": {
          "operationId": "GetActivityWorkingTime",
          "description": "This API request retrieves the activity working time settings in a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityWorkingTimeListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the activity working time settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/activities-working-time/{activity-name}": {
        "get": {
          "operationId": "GetActivityWorkingTimeForAnActivity",
          "description": "This API request retrieves the activity working time settings for the activity that is provided in the request.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityWorkingTimeListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the activity working time settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "editActivityWorkingTime",
          "description": "This API request adds or edits the activity working time for an activity.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a key value pair for the activity working time.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityWorkingTime"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityWorkingTimeListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Add or edit the activity working time of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "deleteActivityWorkingTime",
          "description": "This API request deletes the activity working time for an activity.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/activity"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityWorkingTimeListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete the activity working time of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/resources-cost": {
        "get": {
          "operationId": "GetResourceCost",
          "description": "This API request retrieves the resource cost settings of a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the resource cost settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/resources-cost/{resource-name}": {
        "get": {
          "operationId": "GetResourceCostForAResource",
          "description": "This API request retrieves the resource cost settings of the selected resource of a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/resource"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the resource cost settings of a resource in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "editResourceCost",
          "description": "This API request adds or edits the cost for a resource.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/resource"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a key value pair for the resource cost.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCost"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Add or edit the resource cost of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "deleteResourceCost",
          "description": "This API request deletes the cost for a resource.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/resource"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete the resource cost of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/roles-cost": {
        "get": {
          "operationId": "GetRoleCost",
          "description": "This API request retrieves the role cost settings of a process.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the role cost settings of a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/integration/processes/{projectKey}/project-settings/roles-cost/{role-name}": {
        "get": {
          "operationId": "GetRoleCostForARole",
          "description": "This API request retrieves the role cost settings of the selected role in a project.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            },
            {
              "$ref": "#/components/parameters/role"
            },
            {
              "name": "fromMaster",
              "in": "query",
              "required": false,
              "allowEmptyValue": true,
              "description": "Set the parameter to `true`, if the process provided in the URL is a snapshot and the user wants to retrieve the project settings of the parent project.",
              "schema": {
                "type": "boolean"
              },
              "example": "false"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the role cost settings of the selected role in a process.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "post": {
          "operationId": "editRoleCost",
          "description": "This API request adds or edits the cost for a role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/role"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "required": true,
            "description": "The request body must contain a key value pair for the role cost.</br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCost"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Add or edit the role cost of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        },
        "delete": {
          "operationId": "deleteRoleCost",
          "description": "This API request deletes the cost of a role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/role"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleCostListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequest"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete the role cost of a project.",
          "tags": [
            "Process Inquiry & Management"
          ]
        }
      },
      "/connectors/integration/bai/import": {
        "post": {
          "operationId": "ImportFromBai",
          "description": "This API request performs the data import from Elastic Search to the target project. </br> This API will launch an asynchronous processing: the caller receives the acknowledgment, if the request was successfully forwarded to the pipeline, or an error message, if a problem was found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/integration/bai/job-status/{jobKey}).  </br> </br>\nThe following attributes are required in the request body: </br>  - uid </br> - ts </br> - sign </br> - bpmProcessApplicationName </br> - startInterval </br> - endInterval </br> </br> At least one of projectTitle or projectName must be provided: if the project is not existing, it will be automatically created in the target organization before data uploading. otherwise data will be added to the existing project. </br> If the orgKey attribute is empty the project will searched or created  as a private projects of the user who is executing the request.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaiImportRequest"
                },
                "examples": {
                  "import in new project": {
                    "value": {
                      "uid": "user.pm",
                      "ts": 1599831150683,
                      "sign": "sFaRp6I/qmOGCZbn0mUEhTD2s5cIl91Zi5+8r3yIWSM=",
                      "projectTitle": "myProcess",
                      "projectName": "",
                      "orgKey": "4d725f50",
                      "bpmProcessApplicationName": "myProcessApplicationName",
                      "bpmProcessApplicationVersion": "2064.f762441c-4513-4419-9dcb-c9b5e4e824c4",
                      "bpmProcessName": "myProcessName",
                      "startInterval": "20210101",
                      "endInterval": "20210303"
                    }
                  },
                  "import in existing project": {
                    "value": {
                      "uid": "user.pm",
                      "ts": 1599831150683,
                      "sign": "sFaRp6I/qmOGCZbn0mUEhTD2s5cIl91Zi5+8r3yIWSM=",
                      "projectTitle": "",
                      "projectName": "myprocess",
                      "orgKey": "4d725f50",
                      "bpmProcessApplicationName": "myProcessApplicationName",
                      "bpmProcessApplicationVersion": "2064.f762441c-4513-4419-9dcb-c9b5e4e824c4",
                      "bpmProcessName": "myProcessName",
                      "startInterval": "20210101",
                      "endInterval": "20210303"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "5fba8561fa66ab1039e0c0bc",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "Organization not provided": {
                      "value": {
                        "error": 1001,
                        "data": "Parameter org is null",
                        "success": false
                      }
                    },
                    "Organization not found": {
                      "value": {
                        "error": 1001,
                        "data": "Organization with key <org> not found",
                        "success": false
                      }
                    },
                    "Organization not valid": {
                      "value": {
                        "error": 1001,
                        "data": "Project org not valid",
                        "success": false
                      }
                    },
                    "Project not valid": {
                      "value": {
                        "error": 1022,
                        "data": "Can not get project, Project title is null AND Project name is null",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Import Process Data from Elastic Search (Async).",
          "tags": [
            "Connector IBM BAI"
          ]
        }
      },
      "/connectors/integration/bai/process-applications": {
        "get": {
          "operationId": "GetProcessAppsFromBai",
          "description": "This API request retrieves the list of Process App from ElasticSearch",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "Start date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210101
            },
            {
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "End date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210303
            },
            {
              "name": "baiConfigKey",
              "in": "query",
              "required": false,
              "description": "BAI Configuration Key (to get the credentials from env configuration)",
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessApps"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "StartDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "Connection to ElasticSearch not available": {
                      "value": {
                        "error": 1022,
                        "data": "java.net.ConnectException Timeout connecting to [/IP Port]",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of process applications from ElasticSearch.",
          "tags": [
            "Connector IBM BAI"
          ]
        }
      },
      "/connectors/integration/bai/processes/{processAppName}": {
        "get": {
          "operationId": "GetProcessesFromBai",
          "description": "This API request retrieves the list of processes for the target Process App from ElasticSearch.",
          "parameters": [
            {
              "name": "processAppName",
              "in": "path",
              "required": true,
              "description": "Project App Name",
              "schema": {
                "type": "string"
              },
              "example": "myProcessApp"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "name": "processAppVersion",
              "in": "query",
              "required": false,
              "description": "App Version",
              "schema": {
                "type": "string"
              },
              "example": "2064.f762441c-4513-4419-9dcb-c9b5e4e824c4"
            },
            {
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "Start date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210101
            },
            {
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "End date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210303
            },
            {
              "name": "baiConfigKey",
              "in": "query",
              "required": false,
              "description": "BAI Configuration Key (to get the credentials from env configuration)",
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessNames"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "StartDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "Connection to ElasticSearch not available": {
                      "value": {
                        "error": 1022,
                        "data": "java.net.ConnectException Timeout connecting to [/IP Port]",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of processes of a process application from ElasticSearch.",
          "tags": [
            "Connector IBM BAI"
          ]
        }
      },
      "/connectors/integration/bai/versions/{processAppName}": {
        "get": {
          "operationId": "GetProcessVersionsFromBai",
          "description": "This API request retrieves the list of versions for the target Process App from ElasticSearch.",
          "parameters": [
            {
              "name": "processAppName",
              "in": "path",
              "required": true,
              "description": "Project App Name",
              "schema": {
                "type": "string"
              },
              "example": "myProcessApp"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "Start date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210101
            },
            {
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "End date for searching (yyyyMMdd)",
              "schema": {
                "type": "string"
              },
              "example": 20210303
            },
            {
              "name": "baiConfigKey",
              "in": "query",
              "required": false,
              "description": "BAI Configuration Key (to get the credentials from env configuration)",
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessVersions"
                  }
                }
              }
            },
            "400": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "StartDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "StartDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not provided": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate empty": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "EndDate not valid": {
                      "value": {
                        "error": 1027,
                        "data": "Parameter startDate is not defined or not valid (format yyyyMMdd)",
                        "success": false
                      }
                    },
                    "Connection to ElasticSearch not available": {
                      "value": {
                        "error": 1022,
                        "data": "java.net.ConnectException Timeout connecting to [/IP Port]",
                        "success": false
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of versions of a process application from ElasticSearch.",
          "tags": [
            "Connector IBM BAI"
          ]
        }
      },
      "/analytics/integration/dashboard/{projectKey}/list": {
        "get": {
          "operationId": "ListDashboards",
          "description": "This API request retrieves the list of dashboards included in the project identified by the project key and accessible by the requesting user.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFullResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "dashboards": [
                            {
                              "id": "default",
                              "name": "{{'label.dashboard.default.name'|translate}}",
                              "uri": "",
                              "projectId": "project://61a48caf6facef00eb24eb9d",
                              "projectIsSnapshot": false,
                              "projectParentId": null,
                              "projectOrgId": null,
                              "tenantId": "tenant://-1",
                              "owner": null,
                              "shared": false,
                              "realtime": false,
                              "default": false
                            },
                            {
                              "id": "61a48d364bd77470734c5f71",
                              "name": "Running cases monitoring",
                              "uri": "dashboard://61a48d364bd77470734c5f71",
                              "projectId": "project://61a48caf6facef00eb24eb9d",
                              "projectIsSnapshot": false,
                              "projectParentId": null,
                              "projectOrgId": null,
                              "tenantId": "tenant://-1",
                              "owner": "maintenance.admin",
                              "shared": false,
                              "realtime": false,
                              "default": true
                            }
                          ]
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of analytics dashboards for a process.",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/dashboard/{projectKey}/{dashboardId}/list": {
        "get": {
          "operationId": "ListDashboardWidgets",
          "description": "This API request retrieves the list of widgets included in the dashboard identified by the dashboard Id and included in the  project identified by the project key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "name": "dashboardId",
              "in": "path",
              "required": true,
              "description": "Dashboard Id",
              "schema": {
                "type": "string"
              },
              "example": "61a48d364bd77470734c5f71"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessFullResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "data": {
                            "dashboardId": "61a48d364bd77470734c5f71",
                            "widgets": [
                              {
                                "sizeX": 6,
                                "sizeY": 2,
                                "row": 0,
                                "col": 4,
                                "title": "Rolling metrics",
                                "type": "table-widget",
                                "sort": null,
                                "config": {
                                  "colors": [],
                                  "dataType": "aggregate",
                                  "filterType": "attribute",
                                  "filter": "",
                                  "dimensions": [
                                    "attr-process"
                                  ],
                                  "caseFillDimensions": [],
                                  "dimensionFormatter": {
                                    "attr-process": "auto"
                                  },
                                  "measures": [
                                    {
                                      "displayName": "Date started",
                                      "expression": "STARTTIME",
                                      "formatter": "date",
                                      "displayAs": null,
                                      "filter": "default"
                                    },
                                    {
                                      "displayName": "Case duration",
                                      "expression": "LEADTIME",
                                      "formatter": "duration",
                                      "displayAs": null,
                                      "filter": "default"
                                    },
                                    {
                                      "displayName": "Case duration (up to today)",
                                      "expression": "RUNNINGTIME",
                                      "formatter": "duration",
                                      "displayAs": null,
                                      "filter": "default"
                                    }
                                  ],
                                  "properties": {},
                                  "pathRanges": [],
                                  "skipFilters": false,
                                  "normalizeAxis": false,
                                  "renderAxisLabels": false,
                                  "hideEmptyDimension": false,
                                  "enableCasePrediction": false,
                                  "enableRunningTime": false,
                                  "hideSearch": false,
                                  "withRollup": false,
                                  "keepLast": false,
                                  "targetDate": 1638230399000,
                                  "selectedIdKeepLast": null,
                                  "rowsetThreshold": 10000,
                                  "defaultVisibleRecords": 100,
                                  "keepConformant": false,
                                  "activitiesConformance": "",
                                  "measuresFiltering": false
                                }
                              }
                            ]
                          },
                          "success": true
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of widgets in a dashboard inside a process.",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/dashboard/{projectKey}/{dashboardId}/{widgetTitle}/retrieve": {
        "get": {
          "operationId": "GetDashboardWidget",
          "description": "This API request retrieves the values shown by the widget identified by the widget title inside the dashboard identified by the dashboard Id and contained in the project identified by the project key (Please note that only tabular widget are supported). Please note that this API will NOT consider the filters applied to the dashboard.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "name": "dashboardId",
              "in": "path",
              "required": true,
              "description": "Dashboard Id",
              "schema": {
                "type": "string"
              },
              "example": "61a48d364bd77470734c5f71"
            },
            {
              "name": "widgetTitle",
              "in": "path",
              "required": true,
              "description": "Widget title",
              "schema": {
                "type": "string"
              },
              "example": "my-widget"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "attr-process": "0004",
                            "Date started": 1638417600000,
                            "Case duration": "0.0",
                            "Case duration (up to today)": 5473019806
                          },
                          {
                            "attr-process": "0001",
                            "Date started": 1637434800000,
                            "Case duration": 136800000,
                            "Case duration (up to today)": 6455819806
                          },
                          {
                            "attr-process": "0002",
                            "Date started": 1637434800000,
                            "Case duration": 57600000,
                            "Case duration (up to today)": 57600000
                          },
                          {
                            "attr-process": "0003",
                            "Date started": 1637434800000,
                            "Case duration": 57600000,
                            "Case duration (up to today)": 57600000
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the values shown by a tabular widget inside a process.",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/{projectKey}/query": {
        "post": {
          "deprecated": true,
          "operationId": "ExecuteCustomQuery",
          "description": "This API request posts a query to get results from the Advanced Analytics component in IBM Process Mining. If the API posts an invalid query, the Analytics component returns an error.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          [
                            "Invoice Due Date Passed",
                            [
                              7285
                            ],
                            713621
                          ],
                          [
                            "Invoice Deleted",
                            [
                              1650
                            ],
                            713621
                          ],
                          [
                            "Invoice Cleared",
                            [
                              667482
                            ],
                            713621
                          ],
                          [
                            "Invoice Send Payment",
                            [
                              667482
                            ],
                            713621
                          ],
                          [
                            "Invoice Registered",
                            [
                              713621
                            ],
                            713621
                          ],
                          [
                            "Invoice Vendor Creation",
                            [
                              713617
                            ],
                            713621
                          ]
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/CustomQueryError"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Executes the user-created custom query that is similar to an SQL query.",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/projects/{projectKey}/query": {
        "post": {
          "operationId": "ExecuteCustomQueryAsync",
          "description": "This API request posts a query to get the jobId from the Advanced Analytics component in IBM Process Mining. </br> In case of success, the response will contain the job key that can be used to inquiry the status of the request through the job-status API (/analytics/integration/jobs/query/{jobId}). </br> If the API posts an invalid query, the status of the request through the job-status API will be ERROR.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncCustomQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "3aet68p9j9fiqt4n04fpsc2p1s",
                        "status": "success"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForQuery"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Executes the user-created custom query that is similar to an SQL query (Async).",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/export/dashboards": {
        "post": {
          "deprecated": true,
          "operationId": "ExportDashboard",
          "description": "This API request performs the export of all dashboards included in the projects owned by the requesting user. </br> The exported data will be stored in the filesystem or in a S3 bucket, depending on the configuration. </br> The configuration parameters related to dashboard export are: </br> * *pm-analytics.export.enabled* - To enable/disable the export (true/false), default false </br> * *pm-analytics.export.destination* - Export destination (fs/s3), default fs</br> * *pm-analytics.export.notifyToEmail* - Email address for notification</br> * *pm-analytics.export.fs.baseDir* - Base path for fs export</br> * *pm-analytics.export.s3.bucket* - Bucket name for S3 export</br> * *pm-analytics.export.s3.region* - AWS Region for S3 export</br> * *pm-analytics.export.s3.accessKeyId* - AWS key id for S3 export</br> * *pm-analytics.export.s3.secretKey* - AWS secret key for S3 export </br>\nThis API will launch an asynchronous processing: the caller receives the acknowledgment, if the request is successfully forwarded to the pipeline, or an error message, if a problem has been found in the input data. </br> In case of success the response will contain the job key that can be used to inquiry the request status through the job-status API (/integration/bai/job-status/{jobKey}).  </br> \n",
          "parameters": [
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": "3aet68p9j9fiqt4n04fpsc2p1s",
                        "status": "success"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Export the dashboards in a project (Async).",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/analytics/integration/projects/{projectKey}/dashboards/{dashboardId}": {
        "get": {
          "operationId": "ExportDashboardsInProject",
          "description": "This API request performs the export of a dashboard included in the project owned by the requesting user.</br> The exported data contains only the table widgets in the dashboard and can be stored in the user specified location.",
          "parameters": [
            {
              "$ref": "#/components/parameters/projectKey"
            },
            {
              "$ref": "#/components/parameters/dashboardId"
            },
            {
              "$ref": "#/components/parameters/organization"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "$ref": "#/components/schemas/DashboardZipFile"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForExportDashboard"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Export a dashboard.",
          "tags": [
            "Analytics"
          ]
        }
      },
      "/user-management/integration/organizations/{orgKey}": {
        "patch": {
          "operationId": "UpdateOrganizationByOrgId",
          "description": "This API request updates the organization name and description by its organization key. </br>",
          "parameters": [
            {
              "name": "orgKey",
              "in": "path",
              "required": true,
              "description": "Organization Key",
              "schema": {
                "type": "string"
              },
              "example": "TutorialsOrg"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "name": "Cognitive",
                            "key": "c0a02534",
                            "description": "Refers to an organization named Cognitive",
                            "owner": "maintenance.admin"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Updates an organization",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "DeleteOrganizationByOrgId",
          "description": "This API request deletes the organization by its organization key. </br>",
          "parameters": [
            {
              "name": "orgKey",
              "in": "path",
              "required": true,
              "description": "Organization Key",
              "schema": {
                "type": "string"
              },
              "example": "TutorialsOrg"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "value": {
                        "data": "TutorialsOrg",
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Deletes the organization",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/organizations/{orgKey}/accounts/{accountId}": {
        "post": {
          "operationId": "AddOrganizationMembers",
          "description": "This API request adds the members to an organization.</br>",
          "parameters": [
            {
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "Account ID",
              "schema": {
                "type": "string"
              },
              "example": "62961f56b941e72e6eb5f4c1"
            },
            {
              "name": "orgKey",
              "in": "path",
              "required": true,
              "description": "Organization key",
              "schema": {
                "type": "string"
              },
              "example": "TutorialsOrg"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrgMemberResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "username": "maintenance.admin",
                          "email": "maintenance.admin@mycompanydomain.com",
                          "firstName": "Maintenance",
                          "lastName": "Admin",
                          "id": "62961f56b941e72e6eb5f4c1"
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidInput"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/InputNotFound"
            }
          },
          "summary": "Adds the member to an organization",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "RemoveOrganizationMembers",
          "description": "This API request removes the selected member from the organization.</br>",
          "parameters": [
            {
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "Account ID",
              "schema": {
                "type": "string"
              },
              "example": "62961f56b941e72e6eb5f4c1"
            },
            {
              "name": "orgKey",
              "in": "path",
              "required": true,
              "description": "Organization key",
              "schema": {
                "type": "string"
              },
              "example": "TutorialsOrg"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrgMemberResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "username": "maintenance.admin",
                          "email": "maintenance.admin@mycompanydomain.com",
                          "firstName": "Maintenance",
                          "lastName": "Admin",
                          "id": "62961f56b941e72e6eb5f4c1"
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidInput"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/InputNotFound"
            }
          },
          "summary": "Removes the member from an organization",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/organizations/{orgKey}/accounts": {
        "get": {
          "operationId": "GetOrganizationMembers",
          "description": "This API request retrieves the list of members of an organization </br>",
          "parameters": [
            {
              "name": "orgKey",
              "in": "path",
              "required": true,
              "description": "Organization Key",
              "schema": {
                "type": "string"
              },
              "example": "TutorialsOrg"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/OrgMemberResponse"
                        }
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "username": "maintenance.admin",
                            "email": "maintenance.admin@mycompanydomain.com",
                            "firstName": "Maintenance",
                            "lastName": "Admin",
                            "id": "62961f56b941e72e6eb5f4c1"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidInput"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of users for an organization.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/accounts": {
        "get": {
          "deprecated": true,
          "operationId": "GetAccountListByTenant",
          "description": "This API request retrieves the list of users for a tenant. </br> If the tenant is not provided it will retrieve the list of all users.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountsResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "username": "user1",
                            "email": "user1@mydomain.com",
                            "name": "First User",
                            "organization": "maintenance@mydomain.com",
                            "active": "Yes",
                            "blocked": "No",
                            "totalEvents": 0,
                            "totalTime": 0,
                            "totalTimeStr": "",
                            "lastLogin": 1663592104278,
                            "projectLimit": 200,
                            "sessionLimit": 2,
                            "groupId": "0",
                            "id": "5d1e09a577c86a1309ee74c3",
                            "home": "user1mydomaincom7d5c77"
                          },
                          {
                            "username": "user2",
                            "email": "user2@mydomain.com",
                            "name": "Second User",
                            "organization": "maintenance@mydomain.com",
                            "active": "Yes",
                            "blocked": "No",
                            "totalEvents": 0,
                            "totalTime": 0,
                            "totalTimeStr": "",
                            "lastLogin": 1663592104288,
                            "projectLimit": 200,
                            "sessionLimit": 2,
                            "groupId": "0",
                            "id": "5d1e09a577c86a1309ee75c3",
                            "home": "user2mydomaincom7d5c77"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the list of users by tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/organizations": {
        "get": {
          "operationId": "GetAllOrganizations",
          "description": "This API request retrieves the organization by its name if name is given else retrieves the list of organization associated with the user tenant",
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "required": false,
              "description": "Organization Name",
              "schema": {
                "type": "string"
              },
              "example": "Cognitive"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "name": "Cognitive",
                            "key": "c0a02534",
                            "description": "Refers to an organization named Cognitive",
                            "owner": "maintenance.admin"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/InvalidOrganizationName"
            }
          },
          "summary": "Get organization details",
          "tags": [
            "User Management"
          ]
        },
        "post": {
          "operationId": "CreateOrganization",
          "description": "This API request creates an organization.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "TutorialsOrg"
                    },
                    "description": {
                      "type": "string",
                      "example": "This is an organization for the tutorials"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "TutorialsOrg"
                          },
                          "key": {
                            "type": "string",
                            "example": "c0a02535"
                          },
                          "description": {
                            "type": "string",
                            "example": "This is an organization created for testing purpose"
                          },
                          "owner": {
                            "type": "string",
                            "example": "maintenance.admin"
                          }
                        }
                      },
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "name": "TutorialsOrg",
                          "key": "c0a02535",
                          "description": "This is an organization created for testing purpose",
                          "owner": "maintenance.admin"
                        },
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Creates an organizations",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/accounts/{tenantId}": {
        "delete": {
          "deprecated": true,
          "operationId": "DeleteAccountsByTenant",
          "description": "This API request deletes all users in a tenant. </br> The response contains the list of deleted users. </br> This API can only be called by users who have permission of Tenant Admin for the tenant containing the users to delete.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "value": {
                        "data": [
                          {
                            "username": "user1",
                            "email": "user1@mydomain.com",
                            "name": "First User",
                            "organization": "maintenance@mydomain.com",
                            "active": "Yes",
                            "blocked": "No",
                            "totalEvents": 0,
                            "totalTime": 0,
                            "totalTimeStr": "",
                            "lastLogin": 1663592104278,
                            "projectLimit": 200,
                            "sessionLimit": 2,
                            "groupId": "0",
                            "id": "5d1e09a577c86a1309ee74c3",
                            "home": "user1mydomaincom7d5c77"
                          },
                          {
                            "username": "user2",
                            "email": "user2@mydomain.com",
                            "name": "Second User",
                            "organization": "maintenance@mydomain.com",
                            "active": "Yes",
                            "blocked": "No",
                            "totalEvents": 0,
                            "totalTime": 0,
                            "totalTimeStr": "",
                            "lastLogin": 1663592104288,
                            "projectLimit": 200,
                            "sessionLimit": 2,
                            "groupId": "0",
                            "id": "5d1e09a577c86a1309ee75c3",
                            "home": "user2mydomaincom7d5c77"
                          }
                        ],
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete all users belonging to a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/account/{userIdToDelete}": {
        "delete": {
          "deprecated": true,
          "operationId": "DeleteAccount",
          "description": "This API request deletes a user account. </br> The response contains all details of the deleted users. </br> This API can only be called by users who have permission of Tenant Admin for the tenant containing the user to delete.",
          "parameters": [
            {
              "$ref": "#/components/parameters/userIdToDelete_Path"
            },
            {
              "$ref": "#/components/parameters/userIdForReplace"
            },
            {
              "$ref": "#/components/parameters/force"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "value": {
                        "data": {
                          "username": "user1",
                          "active": true,
                          "allRoles": [
                            {
                              "role": "ROLE_FREE_USER",
                              "typeDesc": "Freemium",
                              "selected": true
                            },
                            {
                              "role": "ROLE_USER",
                              "typeDesc": "Premium",
                              "selected": true
                            },
                            {
                              "role": "ROLE_ADMIN",
                              "typeDesc": "Admin",
                              "selected": false
                            },
                            {
                              "role": "ROLE_GROUP_ADMIN",
                              "typeDesc": "ROLE_GROUP_ADMIN",
                              "selected\"": false
                            }
                          ],
                          "projectLimit": 200,
                          "sessionLimit": 2,
                          "groupId": "0",
                          "tenantName": "",
                          "organization": "",
                          "firstName": "First",
                          "lastName": "User",
                          "email": "user1@mydomain.com",
                          "password": "",
                          "verifyPassword": "",
                          "country": "",
                          "totpAuthEnabled": false,
                          "blocked": false,
                          "applicationUser": false,
                          "apiKey": "",
                          "id": "632a2b8803d97e6c387b6975",
                          "agentEnabled": false,
                          "accountIdSourcePermissions": ""
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a user.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenant/{tenantId}": {
        "delete": {
          "deprecated": true,
          "operationId": "DeleteTenantDeprecated",
          "description": "This API request deletes a tenant. </br> You can call this API only if you have the MultiTenant Admin permissions.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            },
            {
              "$ref": "#/components/parameters/checkTenantName"
            },
            {
              "$ref": "#/components/parameters/userId"
            },
            {
              "$ref": "#/components/parameters/serverTime"
            },
            {
              "$ref": "#/components/parameters/sign"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StringResponse"
                  },
                  "examples": {
                    "success": {
                      "value": {
                        "success": true
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenants": {
        "post": {
          "operationId": "CreateTenant",
          "description": "This API request creates a tenant. </br> You can call this API only if you have the MultiTenant Admin permissions.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Tenant"
                    },
                    {
                      "required": [
                        "name"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForCreateTenant"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "get": {
          "operationId": "GetAllTenants",
          "description": "This API request lists all tenants. </br> You can call this API only if one of the following conditions are adhered:</br> * Your user account has the MultiTenant Admin permissions. </br> * Your user account has the Tenant admin permission and your user account belongs to the tenant for which the API is used.",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantBatchResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Get the details of all tenants.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenants/{tenantId}": {
        "get": {
          "operationId": "GetTenant",
          "description": "This API request lists a tenant. </br> You can call this API only if one of the following conditions are adhered:</br> * Your user account has the MultiTenant Admin permissions. </br> * Your user account has the Tenant admin permission and your user account belongs to the tenant for which the API is used.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Get the details of a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "patch": {
          "operationId": "UpdateTenant",
          "description": "This API request updates a tenant. </br> You can call this API only if one of the following conditions are adhered:</br> * Your user account has the MultiTenant Admin permissions. </br> * Your user account has the Tenant admin permission and your user account belongs to the tenant for which the API is used.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForCreateTenant"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Update a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "DeleteTenant",
          "description": "This API request deletes a tenant. </br> You can call this API only if you have the MultiTenant Admin permissions.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Delete a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenants/{tenantId}/accounts": {
        "get": {
          "operationId": "GetAccountsByTenant",
          "description": "This API request retrieves the list of users for a tenant.</br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountsResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Get the list of users in a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "post": {
          "operationId": "CreateAccountInTenant",
          "description": "This API request creates an account in a tenant.</br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExtendedAccountInfo"
                    },
                    {
                      "required": [
                        "firstName",
                        "lastName",
                        "email",
                        "userName"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForCreateAccount"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Create an account in a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "DeleteccountsInTenant",
          "description": "This API request deletes all the users in a tenant.</br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountsResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/TenantIdNotFound"
            }
          },
          "summary": "Delete all users in a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenants/{tenantId}/accounts/{accountId}": {
        "get": {
          "operationId": "GetUserInTenant",
          "description": "This API request lists a user in a tenant.</br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            },
            {
              "$ref": "#/components/parameters/accountId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/AccountIdNotFound"
            }
          },
          "summary": "Get a user in a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "patch": {
          "operationId": "UpdateUserInTenant",
          "description": "This API request updates a user in a tenant. </br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            },
            {
              "$ref": "#/components/parameters/accountId_Path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfo"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/InvalidRequestForCreateAccount"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/AccountIdNotFound"
            }
          },
          "summary": "Update a user in a tenant.",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "DeleteUserInTenant",
          "description": "This API request deletes a user in a tenant. </br>",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            },
            {
              "$ref": "#/components/parameters/accountId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            },
            "404": {
              "$ref": "#/components/responses/AccountIdNotFound"
            }
          },
          "summary": "Delete a user in a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/groups": {
        "post": {
          "operationId": "CreateGroup",
          "description": "This API request creates a user group when called by users with the admin or group_admin role.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create a group.",
          "tags": [
            "User Management"
          ]
        },
        "get": {
          "operationId": "GetGroup",
          "description": "This API request retrieves the list of user groups under a tenant when called by users with the admin or group_admin role.",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/NoGroupFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "List of groups.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/groups/{groupId}": {
        "delete": {
          "operationId": "DeleteGroup",
          "description": "This API request deletes a user group when called by users with the admin or group_admin role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/groupId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteGroupResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/GroupIdNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a group.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/authorizations": {
        "post": {
          "operationId": "CreateAuthorization",
          "description": "This API request creates an authorization for a user group or user when called by users with the admin or group_admin role.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthorizationResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Create an authorization.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/tenants/{tenantId}/authorizations": {
        "get": {
          "operationId": "GetAuthorization",
          "description": "This API request retrieves the list of authorizations for a tenant when called by users with the admin or group_admin role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/tenantId_Path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthorizationListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/TenantAuthorizationsNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "List of authorizations of a tenant.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/groups/{groupId}/authorizations": {
        "get": {
          "operationId": "GetAuthorizationOfGroup",
          "description": "This API request retrieves the list of authorizations for a group.",
          "parameters": [
            {
              "$ref": "#/components/parameters/groupId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupAuthorizationResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/GroupAuthorizationsNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "List of authorizations for a group.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/accounts/{accountId}/authorizations": {
        "get": {
          "operationId": "GetAuthorizationOfUser",
          "description": "This API retrieves the list of authorizations of a user.",
          "parameters": [
            {
              "$ref": "#/components/parameters/accountId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserAuthorizationResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/UserAuthorizationsNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "List of authorizations of a user.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/authorizations/{authorizationId}": {
        "patch": {
          "operationId": "UpdateAuthorization",
          "description": "This API updates the permissions of an existing authorization.",
          "parameters": [
            {
              "$ref": "#/components/parameters/authorizationId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PatchAuthorizationResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/UpdateAuthorizationNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Update the permissions of an authorization.",
          "tags": [
            "User Management"
          ]
        },
        "delete": {
          "operationId": "Delete an authorization.",
          "description": "This API request deletes an authorization when called by users with the admin or group_admin role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/authorizationId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteAuthorizationResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/AuthorizationIdNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Deletes an authorization.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/groups/{groupId}/accounts": {
        "post": {
          "operationId": "AddUserToGroup",
          "description": "This API request adds a user to a group when called by users with the admin or group_admin role.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/groupId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Adds a user account to the group.",
          "tags": [
            "User Management"
          ]
        },
        "get": {
          "operationId": "GetUsersInGroup",
          "description": "This API request retrieves the list of users in a group.",
          "parameters": [
            {
              "$ref": "#/components/parameters/groupId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UsersListResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/GroupUsersNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "List of users in a group.",
          "tags": [
            "User Management"
          ]
        }
      },
      "/user-management/integration/groups/{groupId}/accounts/{accountId}": {
        "delete": {
          "operationId": "DeleteUserFromGroup",
          "description": "This API request removes a user from the group when called by users with the admin or group_admin role.",
          "parameters": [
            {
              "$ref": "#/components/parameters/groupId"
            },
            {
              "$ref": "#/components/parameters/accountId"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteUserResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/UserIdNotFound"
            },
            "401": {
              "$ref": "#/components/responses/InvalidAuth"
            }
          },
          "summary": "Delete a user from group.",
          "tags": [
            "User Management"
          ]
        }
      }
    },
    "tags": [
      {
        "name": "Time",
        "description": "Requests regarding server time."
      },
      {
        "name": "Authorization",
        "description": "Requests regarding authorization."
      },
      {
        "name": "Job Control",
        "description": "Requests regarding job control."
      },
      {
        "name": "Process Inquiry & Management",
        "description": "Requests regarding process data."
      },
      {
        "name": "Connector IBM BAI",
        "description": "Requests regarding integration with IBM BAI."
      },
      {
        "name": "Analytics",
        "description": "Requests regarding analytics."
      },
      {
        "name": "User Management",
        "description": "Requests regarding user management."
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "ProcessApps": {
          "type": "object",
          "properties": {
            "processApps": {
              "items": {
                "type": "string"
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "ProcessNames": {
          "type": "object",
          "properties": {
            "processNames": {
              "items": {
                "type": "string"
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "ProcessVersions": {
          "type": "object",
          "properties": {
            "processAppsVersions": {
              "items": {
                "type": "string"
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "DecisionRulesRequest": {
          "type": "object",
          "properties": {
            "uid": {
              "description": "User Name",
              "type": "string",
              "example": "user.pm"
            },
            "ts": {
              "description": "Timestamp",
              "type": "string",
              "example": 1599831150683
            },
            "sign": {
              "description": "Signature",
              "type": "string",
              "example": "dp845Vr9gGVnyeWbPMCrjwX3T/t/otYupuEdcwDSI1w="
            },
            "org": {
              "description": "Organization Key",
              "type": "string",
              "example": "4d725f50"
            },
            "useCachedRules": {
              "description": "Flag to use the cached rules, if true the existing rules will be returned, otherwise a new rule mining will be triggered (default false)",
              "type": "string",
              "example": false,
              "default": false
            },
            "updateSettings": {
              "description": "Flag to update the decision rules settings, if true the provided settings will override the existing settings, otherwise they will be used only for this invocation  (default false)",
              "type": "string",
              "default": false,
              "example": false
            },
            "dmnOutputVariableName": {
              "description": "Name of the output variable used in the decision tables",
              "type": "string",
              "example": "outputVariable"
            },
            "settings": {
              "description": "The settings to be used for decision rules mining, only the attributes with value true will be used in the computation",
              "type": "object",
              "properties": {
                "BLOCK": {
                  "description": "Relevant Data Inclusion",
                  "type": "boolean",
                  "example": true
                },
                "CHANGES": {
                  "description": "Relevant Data Inclusion",
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        },
        "ProjectRefRequest": {
          "type": "object",
          "properties": {
            "title": {
              "description": "Project Title",
              "type": "string",
              "example": "myprocess"
            },
            "org": {
              "description": "Organization Key (leave it empty for private projects)",
              "type": "string",
              "example": "4d725f50"
            }
          },
          "required": [
            "title",
            "org"
          ]
        },
        "LongResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "number",
              "example": 0
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "MetaResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ProcessMeta"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "TokenRequest": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "user.pm"
            },
            "apiKey": {
              "type": "string",
              "example": "sFaRp6I/qmOGCZbn0mUEhTD2"
            }
          }
        },
        "ProcessVariableResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ProcessVariable"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProcessVariableBatchResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProcessVariable"
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProcessVariable": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "counter"
            },
            "value": {
              "description": "Value can be any Json value (objects, arrays, numbers, strings ...).",
              "type": "object",
              "example": {
                "count": 100
              }
            },
            "lastModifiedDate": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "lastModifiedTs": {
              "type": "number",
              "readOnly": true,
              "example": 1599831150683
            }
          }
        },
        "Organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "fecc7f3c"
              },
              "name": {
                "type": "string",
                "example": "TutorialsOrg"
              },
              "description": {
                "type": "string",
                "example": "This is an organization for tutorial"
              },
              "owner": {
                "type": "string",
                "example": "maintenance.admin"
              }
            }
          }
        },
        "CustomQuery": {
          "type": "object",
          "properties": {
            "params": {
              "type": "object",
              "properties": {
                "templateId": {
                  "type": "string",
                  "example": "62bde8bd2895512725a62ca5"
                },
                "query": {
                  "type": "string",
                  "example": "SELECT ACTIVITY, count(*), FILTERED_CASES as MEASURE_0 FROM dual GROUP BY ACTIVITY"
                }
              }
            }
          }
        },
        "AsyncCustomQuery": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "templateId": {
              "type": "string",
              "example": "62bde8bd2895512725a62ca5",
              "description": "The unique Id of the filter template."
            },
            "query": {
              "type": "string",
              "example": "SELECT CASEID FROM EVENTLOG GROUP BY CASEID",
              "description": "This represents the SQL query that requires execution. <br/>If the column name in the SQL query contains a hyphen, the name must be enclosed in backslashes and quotes. For example, '\\\"TOTAL-AMOUNT\\\"'."
            },
            "targetDate": {
              "type": "string",
              "example": "2023-12-01T00:00:00.000Z",
              "description": "The date upto which the data will be displayed."
            },
            "activitiesConformance": {
              "type": "string",
              "enum": [
                "ONLY_CONFORMANT",
                "ONLY_NOT_CONFORMANT"
              ],
              "description": "When you select Activity in the Dimension field in an Analytics Widget, you can select one of the following options to filter the activities per conformance to a reference model, <br/> - Show all (Default option) <br/> - Keep conformant activities <br/> - Keep not conformant activities"
            },
            "keepLast": {
              "type": "boolean",
              "example": true,
              "description": "When keepLast is true, only the last value before the specified date is considered for the selected measures."
            }
          }
        },
        "BaiImportRequest": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "user.pm"
            },
            "ts": {
              "type": "string",
              "example": "1599831150683"
            },
            "sign": {
              "type": "string",
              "example": "sFaRp6I/qmOGCZbn0mUEhTD2s5cIl91Zi5+8r3yIWSM="
            },
            "baiConfigKey": {
              "type": "string",
              "example": "test"
            },
            "projectTitle": {
              "type": "string",
              "example": "myProcess"
            },
            "projectName": {
              "type": "string",
              "example": ""
            },
            "orgKey": {
              "type": "string",
              "example": "4d725f50"
            },
            "bpmProcessApplicationName": {
              "type": "string",
              "example": "myProcessApplicationName"
            },
            "bpmProcessApplicationVersion": {
              "type": "string",
              "example": "2064.f762441c-4513-4419-9dcb-c9b5e4e824c4"
            },
            "bpmProcessName": {
              "type": "string",
              "example": "myProcessName"
            },
            "startInterval": {
              "type": "string",
              "example": "20210101"
            },
            "endInterval": {
              "type": "string",
              "example": "20210303"
            }
          }
        },
        "ProcessResponse": {
          "type": "object",
          "properties": {
            "projectKey": {
              "type": "string",
              "example": ""
            },
            "error": {
              "type": "integer",
              "example": ""
            },
            "data": {
              "type": "string",
              "example": ""
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProjectKeyResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "integer",
              "example": ""
            },
            "data": {
              "type": "string",
              "example": ""
            },
            "projectKey": {
              "type": "string",
              "example": ""
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "StringResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "integer",
              "example": ""
            },
            "data": {
              "type": "string",
              "example": ""
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "StatusResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "integer",
              "example": ""
            },
            "data": {
              "type": "string",
              "example": ""
            },
            "output": {
              "type": "object",
              "properties": {
                "bpmnXml": {
                  "type": "string"
                },
                "mapGatewayIdDmnDiagram": {
                  "type": "string"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "StatusResponseBAI": {
          "type": "object",
          "properties": {
            "error": {
              "type": "integer",
              "example": ""
            },
            "data": {
              "type": "string",
              "example": ""
            },
            "output": {
              "type": "object",
              "properties": {
                "projectKey": {
                  "type": "string"
                },
                "orgKey": {
                  "type": "string"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "SignResponse": {
          "type": "object",
          "properties": {
            "sign": {
              "type": "string",
              "example": ""
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "FilterInfo": {
          "type": "object",
          "properties": {
            "attr": {
              "type": "string",
              "nullable": false,
              "description": "Name of the attribute",
              "enum": [
                "attr-process",
                "attr-process-1",
                "attr-process-2",
                "attr-process-3",
                "attr-process-4",
                "attr-process-5",
                "attr-activity",
                "attr-<Custom Field>"
              ]
            },
            "value": {
              "type": "string",
              "nullable": false,
              "description": "Value of the attribute"
            },
            "from": {
              "type": "string",
              "nullable": true,
              "description": "Start Date in the format 'dd/MM/yyyy'"
            },
            "to": {
              "type": "string",
              "nullable": true,
              "description": "End Date in the format 'dd/MM/yyyy'"
            },
            "backPeriod": {
              "type": "string",
              "nullable": true,
              "description": "Backward period in days; if the 'from' attribute is null or empty, this period is applied the current date (or to the 'to' attribute if present)."
            }
          },
          "required": [
            "attr",
            "value"
          ]
        },
        "ProcessInfo": {
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "description": "Tenant Id"
            },
            "organization": {
              "type": "string",
              "description": "Id of the organization"
            },
            "organizationTitle": {
              "type": "string",
              "description": "Name of the organization"
            },
            "projectName": {
              "type": "string",
              "description": "Name of the Project"
            },
            "projectTitle": {
              "type": "string",
              "description": "Title of the Project"
            },
            "projectUrl": {
              "type": "string",
              "description": "URL of the Project"
            },
            "projectOwner": {
              "type": "string",
              "description": "User Id of the project owner."
            },
            "projectTutorial": {
              "type": "boolean",
              "description": "Indicates whether the project is tutorial or not. If 'yes', the project is a tutorial. If 'no', the project is not a tutorial."
            },
            "projectSnapshot": {
              "type": "boolean",
              "description": "Indicates whether the project is the snapshot of an existing project or not. If 'yes', the project is a snapshot. If 'no', the project is not a snapshot."
            },
            "projectMultiLevel": {
              "type": "boolean",
              "description": "Indicates whether the project is multi-level or not. If 'yes', the project is multi-level. If 'no', the project is not multi-level."
            },
            "projectTotalCaseCount": {
              "type": "number",
              "description": "Total count of cases in the project."
            },
            "projectTotalEventCount": {
              "type": "number",
              "description": "Total count of events in the project."
            },
            "projectBusinessHours": {
              "type": "string",
              "description": "The business hours of the project."
            },
            "projectExcludeWeekends": {
              "type": "boolean",
              "description": "Indicates whether the project excludes weekends or not. If 'yes', the project excludes weekends. If 'no', the project does not exclude weekends."
            },
            "projectRefModel": {
              "type": "boolean",
              "description": "Indicates whether the project has a reference model or not. If 'yes', the project has a reference model. If 'no', the project does not have a reference model."
            },
            "projectCurrency": {
              "type": "string",
              "description": "Currency used in the Project"
            },
            "projectLastAccessDate": {
              "type": "number",
              "description": "Last accessed timestamp"
            }
          }
        },
        "AccessProcessInfo": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "Title of the project"
            },
            "sub_text": {
              "type": "string",
              "description": "Name of the Organization"
            },
            "drilldown_url": {
              "type": "string",
              "description": "URL of the Project"
            }
          }
        },
        "ProcessMeta": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "tutorial": {
              "type": "boolean"
            },
            "snapshot": {
              "type": "boolean"
            },
            "multiLevel": {
              "type": "boolean"
            },
            "owner": {
              "type": "string"
            },
            "organization": {
              "type": "string"
            },
            "organizationTitle": {
              "type": "string"
            }
          }
        },
        "FullInfo": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "tutorial": {
              "type": "boolean"
            },
            "snapshot": {
              "type": "boolean"
            },
            "multiLevel": {
              "type": "boolean"
            },
            "owner": {
              "type": "string"
            },
            "organization": {
              "type": "string"
            },
            "organizationTitle": {
              "type": "string"
            },
            "totalCaseCount": {
              "type": "integer"
            },
            "totalEventCount": {
              "type": "integer"
            },
            "businessHours": {
              "type": "string"
            },
            "excludeWeekends": {
              "type": "boolean"
            },
            "refModel": {
              "type": "boolean"
            },
            "currency": {
              "type": "string"
            },
            "lastAccessDate": {
              "type": "number"
            }
          }
        },
        "FullNavigation": {
          "type": "object",
          "properties": {
            "pathToDataSource": {
              "type": "string"
            },
            "pathToDashboard": {
              "type": "string"
            },
            "pathToDiff": {
              "type": "string"
            },
            "pathToWorkflow": {
              "type": "string"
            },
            "pathToBpmn": {
              "type": "string"
            },
            "pathToActivityMap": {
              "type": "string"
            },
            "pathToSocialNet": {
              "type": "string"
            }
          }
        },
        "FullPerformance": {
          "type": "object",
          "properties": {
            "eventCount": {
              "type": "integer"
            },
            "caseCount": {
              "type": "integer"
            },
            "arrivalRate": {
              "type": "number"
            },
            "averageCaseLeadTime": {
              "type": "number"
            },
            "medianCaseLeadTime": {
              "type": "number"
            },
            "minimumCaseLeadTime": {
              "type": "number"
            },
            "maximumCaseLeadTime": {
              "type": "number"
            }
          }
        },
        "FullConformance": {
          "type": "object",
          "properties": {
            "similarity": {
              "type": "number"
            },
            "averageFitness": {
              "type": "number"
            },
            "minimumFitness": {
              "type": "number"
            },
            "maximumFitness": {
              "type": "number"
            }
          }
        },
        "ProcessFullInfo": {
          "type": "object",
          "properties": {
            "info": {
              "$ref": "#/components/schemas/FullInfo"
            },
            "navigation": {
              "$ref": "#/components/schemas/FullNavigation"
            },
            "performance": {
              "$ref": "#/components/schemas/FullPerformance"
            },
            "conformance": {
              "$ref": "#/components/schemas/FullConformance"
            }
          }
        },
        "AccountInfo": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "description": "First name of the user.",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "description": "Last name of the user.",
              "example": "Sam"
            },
            "country": {
              "type": "string",
              "description": "Country of the user. You must ensure that the value adheres to the ISO 3166-1 alpha-2 standards.",
              "example": "IN"
            },
            "email": {
              "type": "string",
              "description": "Email address of the account.",
              "example": "admin@ibm.com"
            },
            "name": {
              "type": "string",
              "description": "Name of the account.",
              "example": "John Sam",
              "readOnly": true
            },
            "organization": {
              "type": "string",
              "readOnly": true,
              "description": "Organization of the user.",
              "example": "tutorails"
            },
            "agentEnabled": {
              "type": "boolean",
              "description": "Flag to enable agent.",
              "example": true
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Roles of the user.",
              "readOnly": true
            },
            "technicalUser": {
              "type": "boolean",
              "description": "Describes whether or not the user is a technical user.",
              "example": true
            },
            "apiKey": {
              "type": "string",
              "readOnly": true,
              "description": "API key of the user account.",
              "example": "irfvo44b5hgnp65e"
            },
            "active": {
              "type": "boolean",
              "description": "Describes whether an account is active or not.",
              "example": true
            },
            "blocked": {
              "type": "boolean",
              "readOnly": true,
              "description": "Describes whether an account is blocked or not.",
              "example": false
            },
            "tenantId": {
              "type": "string",
              "description": "Tenant ID of the user.",
              "readOnly": true,
              "example": "cognitive"
            },
            "accountId": {
              "type": "string",
              "description": "Account ID of the user account..",
              "example": 65426389162542,
              "readOnly": true
            },
            "password": {
              "type": "string",
              "description": "This field is mandatory if the identity provider is Process Mining instead of SAML, LDAP, or OCP IAM.",
              "writeOnly": true
            }
          }
        },
        "ExtendedAccountInfo": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AccountInfo"
            },
            {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Username of the account",
                  "example": "maintenance.admin"
                }
              }
            }
          ]
        },
        "ArrayOfAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ExtendedAccountInfo"
          }
        },
        "AccountsResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ArrayOfAccounts"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ArrayOfProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ProcessInfo"
          }
        },
        "ProcessesResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ArrayOfProcesses"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "OrganizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/Organizations"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ArrayOfAccessProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AccessProcessInfo"
          }
        },
        "AccessProcessesResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ArrayOfAccessProcesses"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProcessFullResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ProcessFullInfo"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "DashboardZipFile": {
          "type": "string",
          "description": "A successful response exports a zip file having files in .csv format that contains the exported data.",
          "format": "binary"
        },
        "DeploymentResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "data": {
              "type": "object",
              "properties": {
                "backups": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Backup"
                  }
                },
                "supportedTypes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "core-kv-activity-cost"
                  }
                },
                "typeRevision": {
                  "type": "object",
                  "properties": {
                    "core-settings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "translations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-kv-role-cost": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-kv-resource-cost": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-mapping": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-project-settings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-templates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "analytics-dashboards": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-alias": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-kv-activity-fte": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-ref-model": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-simulation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "core-kv-activity-cost": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    },
                    "custom-metrics": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRevision"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "DeploymentRevision": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer",
              "example": 1
            },
            "sourcePackage": {
              "type": "string",
              "example": "623bcafaecf18d04486d4d70"
            },
            "created": {
              "type": "number",
              "example": 1651481892627
            },
            "username": {
              "type": "string",
              "example": "maintenance.admin"
            },
            "commitMessage": {
              "type": "string",
              "example": "Settings"
            }
          }
        },
        "Backup": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "626f9c16d720b9460a6c3885"
            },
            "owner": {
              "type": "string",
              "example": "maintenance.admin"
            },
            "project": {
              "type": "string",
              "example": "procure"
            },
            "created": {
              "type": "number",
              "example": 1651481622522
            },
            "createdAt": {
              "type": "number",
              "example": 1651481622522
            },
            "createdBy": {
              "type": "string",
              "example": "john"
            },
            "sourcePackage": {
              "type": "string",
              "example": "623bcafaecf18d04486d4d70"
            },
            "files": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "core-kv-activity-cost"
              }
            },
            "backupPath": {
              "type": "string",
              "example": "deploy-1651481622509.idp"
            },
            "rollbackPath": {
              "type": "string"
            },
            "message": {
              "type": "string",
              "example": "Settings"
            }
          }
        },
        "BackupFile": {
          "type": "string",
          "description": "This produces a binary file which can be downloaded using .idp extention",
          "format": "binary"
        },
        "KpiSettingsResponse": {
          "type": "object",
          "description": "Response of the KPI-settings API",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/KpiSettings"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "KpiSettings": {
          "type": "object",
          "description": "KPI settings for the process and activities",
          "properties": {
            "process": {
              "$ref": "#/components/schemas/ProcessKpiSettings"
            },
            "activities": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ActivityKpi"
              }
            }
          }
        },
        "ProcessKpiSettings": {
          "type": "object",
          "description": "KPI settings related to the process",
          "properties": {
            "kpis": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Kpi"
              }
            }
          }
        },
        "ActivityKpi": {
          "type": "object",
          "description": "KPI settings related to the activities",
          "properties": {
            "activityName": {
              "type": "string",
              "example": "default"
            },
            "kpis": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Kpi"
              }
            }
          }
        },
        "Kpi": {
          "type": "object",
          "description": "This contains different KPI parameters",
          "properties": {
            "warningThreshold": {
              "type": "number",
              "example": 1
            },
            "criticalThreshold": {
              "type": "number",
              "example": 8
            },
            "warningThresholdUnit": {
              "type": "string",
              "enum": [
                "DAYS",
                "HOURS",
                "MINUTES",
                "SECONDS",
                "MONEY",
                "percent"
              ]
            },
            "criticalThresholdUnit": {
              "type": "string",
              "enum": [
                "DAYS",
                "HOURS",
                "MINUTES",
                "SECONDS",
                "MONEY",
                "percent"
              ]
            },
            "unitType": {
              "type": "string",
              "enum": [
                "timestamp",
                "double"
              ]
            },
            "name": {
              "type": "string",
              "description": "This refers to the different types of KPIs. Among these KPIs, case-throughput and case-cost are process related KPIs and activity-throughput, activity-duration, activity-wait-queue, and resource-allocation are activity related KPIs.",
              "enum": [
                "case-throughput",
                "case-cost",
                "activity-throughput",
                "activity-duration",
                "activity-wait-queue",
                "resource-allocation"
              ]
            }
          }
        },
        "ProcessAnalysis": {
          "type": "object",
          "description": "Process statistics for analysis",
          "properties": {
            "duration": {
              "type": "number",
              "description": "Duration of a process"
            },
            "totalCases": {
              "type": "number",
              "description": "Count of the total cases in a process"
            },
            "totalEvents": {
              "type": "number",
              "description": "Count of the total events in a process"
            },
            "filteredCases": {
              "type": "number",
              "description": "Count of the filtered cases in a process"
            },
            "filteredEvents": {
              "type": "number",
              "description": "Count of the filtered events in a process"
            },
            "minThroughputTime": {
              "type": "number",
              "description": "Minimum throughput duration in milliseconds of a process"
            },
            "maxThroughputTime": {
              "type": "number",
              "description": "Maximum throughput duration in milliseconds of a process"
            },
            "avgThroughputTime": {
              "type": "number",
              "description": "Average throughput duration in milliseconds of a process"
            },
            "stdThroughputTime": {
              "type": "number",
              "description": "Standard throughput duration in milliseconds of a process"
            },
            "medianThroughputTime": {
              "type": "number",
              "description": "Median throughput duration in milliseconds of a process"
            },
            "minRunningThroughputTime": {
              "type": "number",
              "description": "Minimum running throughput duration in milliseconds of a process"
            },
            "maxRunningThroughputTime": {
              "type": "number",
              "description": "Maximum running throughput duration in milliseconds of a process"
            },
            "avgRunningThroughputTime": {
              "type": "number",
              "description": "Average running throughput duration in milliseconds of a process"
            },
            "stdRunningThroughputTime": {
              "type": "number",
              "description": "Standard running throughput duration in milliseconds of a process"
            },
            "minCompletedThroughputTime": {
              "type": "number",
              "description": "Minimum completed throughput duration in milliseconds of a process"
            },
            "maxCompletedThroughputTime": {
              "type": "number",
              "description": "Maximum completed throughput duration in milliseconds of a process"
            },
            "avgCompletedThroughputTime": {
              "type": "number",
              "description": "Average completed throughput duration in milliseconds of a process"
            },
            "stdCompletedThroughputTime": {
              "type": "number",
              "description": "Standard completed throughput duration in milliseconds of a process"
            },
            "minArrivalRate": {
              "type": "number",
              "description": "Minimum number of cases in a day in a process"
            },
            "maxArrivalRate": {
              "type": "number",
              "description": "Maximum number of cases in a day in a process"
            },
            "avgArrivalRate": {
              "type": "number",
              "description": "Average number of cases in a day in a process"
            },
            "resources": {
              "type": "array",
              "description": "Resources involved in a process",
              "items": {
                "type": "string"
              }
            },
            "roles": {
              "type": "array",
              "description": "Roles involved in a process",
              "items": {
                "type": "string"
              }
            },
            "minTime": {
              "type": "number",
              "description": "Start time of the first activity in a process"
            },
            "maxTime": {
              "type": "number",
              "description": "End time of the last activity in a process"
            },
            "activityNames": {
              "type": "array",
              "description": "Activities involved in a process",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Node": {
          "type": "object",
          "description": "Statistics related to an activity",
          "properties": {
            "statistics": {
              "type": "object",
              "properties": {
                "caseRepetition": {
                  "type": "number",
                  "description": "Repeated cases of an activity"
                },
                "minDuration": {
                  "type": "number",
                  "description": "Minimum duration of an activity"
                },
                "cost": {
                  "type": "number",
                  "description": "Cost of an activity"
                },
                "frequency": {
                  "type": "number",
                  "description": "Frequency of an activity"
                },
                "totalStandardCost": {
                  "type": "number",
                  "description": "Total standard cost of an activity"
                },
                "avgDuration": {
                  "type": "number",
                  "description": "Average duration of an activity"
                },
                "totalResourceCost": {
                  "type": "number",
                  "description": "Total resource cost of an activity"
                },
                "medianDuration": {
                  "type": "number",
                  "description": "Median duration of an activity"
                },
                "automation": {
                  "type": "number",
                  "description": "Automation involved in an activity"
                },
                "entityName": {
                  "type": "string",
                  "description": "Entity name of an activity"
                },
                "overallCost": {
                  "type": "number",
                  "description": "Overall cost of an activity"
                },
                "avgRepetition": {
                  "type": "number",
                  "description": "Average repetition of an activity"
                },
                "maxDuration": {
                  "type": "number",
                  "description": "Maximum duration of an activity"
                }
              }
            },
            "roles": {
              "type": "array",
              "description": "Roles associated with an activity",
              "items": {
                "type": "string"
              }
            },
            "resources": {
              "type": "array",
              "description": "Resources associated with an activity",
              "items": {
                "type": "string"
              }
            },
            "activityName": {
              "type": "string",
              "description": "Name of the activity"
            }
          }
        },
        "Edge": {
          "type": "object",
          "description": "Statistics of a relation between activities",
          "properties": {
            "statistics": {
              "type": "object",
              "properties": {
                "parallelFrequency": {
                  "type": "number",
                  "description": "Parallel frequency of a relation"
                },
                "caseRepetition": {
                  "type": "number",
                  "description": "Repeated cases of a relation"
                },
                "medianDuration": {
                  "type": "number",
                  "description": "Median duration of a relation"
                },
                "minDuration": {
                  "type": "number",
                  "description": "Minimum duration of a relation"
                },
                "cost": {
                  "type": "number",
                  "description": "Cost of a relation"
                },
                "frequency": {
                  "type": "number",
                  "description": "Frequency of a relation"
                },
                "avgRepetition": {
                  "type": "number",
                  "description": "Average repetition of a relation"
                },
                "overallCost": {
                  "type": "number",
                  "description": "Overall cost of a relation"
                },
                "maxDuration": {
                  "type": "number",
                  "description": "Maximum duration of a relation"
                },
                "avgDuration": {
                  "type": "number",
                  "description": "Average duration of a relation"
                }
              }
            },
            "sourceActivity": {
              "type": "string",
              "description": "Start activity of a relation"
            },
            "targetActivity": {
              "type": "string",
              "description": "End activity of a relation"
            }
          }
        },
        "ProcessGraph": {
          "type": "object",
          "description": "This schema contains an array of activities and activity relations along with the activities after Start in a process",
          "properties": {
            "nodes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Node"
              }
            },
            "edges": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Edge"
              }
            },
            "activitiesAfterStart": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ProcessModel": {
          "type": "object",
          "description": "This contains graph and analysis of a process",
          "properties": {
            "model": {
              "$ref": "#/components/schemas/ProcessGraph"
            },
            "processAnalysis": {
              "$ref": "#/components/schemas/ProcessAnalysis"
            }
          }
        },
        "ProcessModelResponse": {
          "type": "object",
          "description": "Response of the process model statistics API",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ProcessModel"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "NodeResponse": {
          "type": "object",
          "description": "Response of the single activity statistics API",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/Node"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "EdgeResponse": {
          "type": "object",
          "description": "Response of the relation statistics API",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Edge"
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProcessFilterJobResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "description": "The job id to retrieve the results",
              "example": "62647ffc22120123e2d85c21"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "DeviationResponse": {
          "type": "object",
          "properties": {
            "deviationType": {
              "type": "string",
              "enum": [
                "INSERTED_ACTIVITY",
                "INSERTED_START_ACTIVITY",
                "SKIPPED_ACTIVITY",
                "SKIPPED_RELATION",
                "INVERTED_RELATION",
                "INSERTED_RELATION"
              ]
            },
            "startActivity": {
              "type": "string"
            },
            "endActivity": {
              "type": "string"
            },
            "activityName": {
              "type": "string"
            },
            "caseCount": {
              "type": "number"
            },
            "caseRatio": {
              "type": "number"
            },
            "steps": {
              "type": "number"
            },
            "throughput": {
              "type": "number"
            },
            "cost": {
              "type": "number"
            }
          }
        },
        "OrgMemberResponse": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "ArrayOfFilters": {
          "type": "array",
          "description": "Filters  list",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeFilter"
              },
              {
                "$ref": "#/components/schemas/KPIFilter"
              },
              {
                "$ref": "#/components/schemas/PatternFilter"
              },
              {
                "$ref": "#/components/schemas/OutlierFilter"
              },
              {
                "$ref": "#/components/schemas/ParallelismFilter"
              },
              {
                "$ref": "#/components/schemas/RelationFilter"
              },
              {
                "$ref": "#/components/schemas/ReworkFilter"
              },
              {
                "$ref": "#/components/schemas/ThroughputFilter"
              },
              {
                "$ref": "#/components/schemas/TimeSpanFilter"
              },
              {
                "$ref": "#/components/schemas/VariantFilter"
              },
              {
                "$ref": "#/components/schemas/DiscardFilter"
              },
              {
                "$ref": "#/components/schemas/ScriptFilter"
              },
              {
                "$ref": "#/components/schemas/RunningCaseFilter"
              },
              {
                "$ref": "#/components/schemas/ConformanceCaseFilter"
              },
              {
                "$ref": "#/components/schemas/SimulatedCaseFilter"
              },
              {
                "$ref": "#/components/schemas/CustomMetricFilter"
              }
            ]
          }
        },
        "TransientFilter": {
          "type": "object",
          "properties": {
            "filters": {
              "$ref": "#/components/schemas/ArrayOfFilters"
            }
          }
        },
        "RunningCaseFilter": {
          "type": "object",
          "description": "Filter for filtering the running or completed cases",
          "required": [
            "filterType",
            "excludeCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "The type of filter used for filtering the running or completed cases",
              "enum": [
                "running"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for RunningCase filter",
              "readOnly": true
            },
            "excludeCases": {
              "type": "string",
              "description": "Operator to exclude running cases or completed cases. If you select \"running\", you exclude Running Cases. If you select \"completed\", you exclude Completed Cases.",
              "enum": [
                "running",
                "completed"
              ]
            }
          }
        },
        "ConformanceCaseFilter": {
          "type": "object",
          "description": "Filter to be applied to filter conformant/not-conformant cases",
          "required": [
            "filterType",
            "excludeCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for filtering conformant/not-conformant cases",
              "enum": [
                "conformant"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for ConformanceCase filter",
              "readOnly": true
            },
            "excludeCases": {
              "type": "string",
              "description": "Operator to exclude conformant or non-conformant cases. If you select \"nonConformance\", you exclude Non-conformant Cases. If you select \"conformance\", you exclude Conformant Cases. ",
              "enum": [
                "conformance",
                "nonConformance"
              ]
            }
          }
        },
        "SimulatedCaseFilter": {
          "type": "object",
          "description": "Filter to be applied to filter simulated or as-is cases",
          "required": [
            "filterType",
            "excludeCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for filtering simulated or as-is cases",
              "enum": [
                "simulation"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for SimulatedCase filter",
              "readOnly": true
            },
            "excludeCases": {
              "type": "string",
              "description": "Operator to exclude simulated or as-is cases. If you select \"simulated\", you exclude Simulated Cases. If you select \"asIs\", you exclude as-is cases. ",
              "enum": [
                "simulated",
                "asIs"
              ]
            }
          }
        },
        "CustomMetricFilter": {
          "type": "object",
          "description": "Filter for viewing the process model based on the condition set for a Custom Metric.",
          "required": [
            "filterType",
            "customMetricName",
            "operator",
            "customMetricValue"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Type of a Custom Metric filter."
            },
            "label": {
              "type": "string",
              "description": "Description of the Custom Metric filter.",
              "readOnly": true
            },
            "customMetricName": {
              "type": "string",
              "description": "Name of Custom Metric."
            },
            "customMetricDatatype": {
              "type": "string",
              "description": "The type of data that a Custom Metric provides.",
              "enum": [
                "double",
                "boolean",
                "date",
                "string"
              ],
              "readOnly": true
            },
            "operator": {
              "type": "string",
              "description": "Operators for the Custom Metric filter:\n\n* If customMetricDataType is BOOLEAN/STRING, you can select ‘equals’ (E) or ‘not equals’ (NE) as the operator.       \n* If customMetricDataType is DOUBLE, you can select ‘greater than (GT)’, ‘greater than or equal to (GTE)’, ‘less than (LT)’, ‘less than or equal to (LTE)’, ‘equal to (E)’, or ‘not equal to (NE)’ as the operator.        \n* If customMetricDataType is DATE, you can select ‘greater than (GT)’, ‘greater than or equal to (GTE)’, ‘less than (LT)’, ‘less than or equal to (LTE)’, ‘equal to (E)’, ‘not equal to (NE)’, or ‘between (BW)’ as the operator.",
              "enum": [
                "LT",
                "LTE",
                "GT",
                "GTE",
                "E",
                "NE",
                "BW"
              ]
            },
            "customMetricValue": {
              "type": "string",
              "description": "Value defined for operator."
            },
            "customMetricEndValue": {
              "type": "string",
              "description": "Value defined for the end date of the Between (BW) operator, in the DATE customMetricDataType."
            }
          }
        },
        "AttributeFilter": {
          "type": "object",
          "description": "Filters process based on the event attribute",
          "required": [
            "filterType",
            "attributeValue",
            "attributeKey",
            "matchCases",
            "matchingRule"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for attribute filter",
              "enum": [
                "attribute"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Attribute filter",
              "readOnly": true
            },
            "attributeValue": {
              "type": "string",
              "description": "Value of the event attribute specific to a project"
            },
            "attributeKey": {
              "type": "string",
              "description": "Value of an existing default/custom event attribute of the project.\n\nIf the value is \"activity\", it is considered as an Activity filter.\n\nIf the value is not \"process\", it must not contain operator, timeValue or timeUnit.\n\nExamples for default event attributes are: \n* process\n* activity\n* resource\n* role\n"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            },
            "timeSpanFrom": {
              "type": "string",
              "format": "date",
              "description": "Start date in the format yyyy-mm-dd"
            },
            "matchingRule": {
              "type": "string",
              "description": "Operator to match filter anywhere within a case, at the start of a case, or at the end of a case",
              "enum": [
                "ANY",
                "FIRST",
                "LAST"
              ]
            },
            "timeSpanTo": {
              "type": "string",
              "format": "date",
              "description": "End date in the format yyyy-mm-dd"
            },
            "operator": {
              "type": "string",
              "description": "Operator to indicate durations that are more than or less than timeValue",
              "enum": [
                "LT",
                "LTE",
                "GTE",
                "GT"
              ]
            },
            "timeUnit": {
              "type": "string",
              "description": "Time Unit for Duration",
              "enum": [
                "NANOSECONDS",
                "MICROSECONDS",
                "MILLISECONDS",
                "SECONDS",
                "MINUTES",
                "HOURS",
                "DAYS"
              ]
            },
            "timeValue": {
              "type": "number",
              "description": "Value for Duration"
            },
            "inclusiveTimeSpan": {
              "type": "boolean",
              "description": "Bound Time"
            }
          }
        },
        "KPIFilter": {
          "type": "object",
          "description": "Filter to be applied based on one or more KPI rules",
          "required": [
            "filterType",
            "retainCritical",
            "kpis"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for KPI filter",
              "enum": [
                "kpi"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for KPI filter",
              "readOnly": true
            },
            "kpis": {
              "type": "array",
              "description": "KPI rules (OR relations)",
              "items": {
                "type": "string",
                "enum": [
                  "case-throughput-range",
                  "service-range",
                  "waittime-range",
                  "throughput-range"
                ]
              }
            },
            "retainCritical": {
              "type": "boolean",
              "description": "Retain KPI-critical cases if true or Retain cases within KPI boundaries if false"
            }
          }
        },
        "PatternFilter": {
          "type": "object",
          "description": "Filter to be applied based on a specific process flow pattern",
          "required": [
            "filterType",
            "attributeKey",
            "pattern",
            "matchCases",
            "matchingRule"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Pattern filter",
              "enum": [
                "pattern"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Pattern filter",
              "readOnly": true
            },
            "attributeKey": {
              "type": "string",
              "description": "Value of an existing default/custom event attribute of the project.\n\nExamples for default event attributes are: \n* process\n* activity\n* resource\n* role\n"
            },
            "pattern": {
              "type": "string",
              "description": " Process Flow Pattern used by the filter are as follows: \n * \\<A>.\\*\\<B> ------- B follows A\n * \\<A>\\<B>   -------   B directly follows A\n * \\<A>.\\*\\<B>.\\*\\<C> -------  C follows A and B\n * (\\<A>.*){2,} ------- at least a rework of activity A\n * (\\<A>.\\*\\<B>.*){2,} ------- at least a rework of A to B path\n\nwhere A, B and C are activities."
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            },
            "matchingRule": {
              "type": "string",
              "description": "Operator to match filter anywhere within a case, at the start of a case, or at the end of a case",
              "enum": [
                "ANY",
                "FIRST",
                "LAST"
              ]
            },
            "operator": {
              "type": "string",
              "description": "Operator to indicate durations that are more than or less than timeValue",
              "enum": [
                "LT",
                "LTE",
                "GTE",
                "GT"
              ]
            },
            "timeUnit": {
              "type": "string",
              "description": "Time Unit for Duration",
              "enum": [
                "NANOSECONDS",
                "MICROSECONDS",
                "MILLISECONDS",
                "SECONDS",
                "MINUTES",
                "HOURS",
                "DAYS"
              ]
            },
            "timeValue": {
              "type": "number",
              "description": "Value for Duration"
            }
          }
        },
        "OutlierFilter": {
          "type": "object",
          "description": "Filters events based on the outlier configuration and filtering level",
          "required": [
            "filterType",
            "range",
            "outlierLevel",
            "matchCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for outlier filters",
              "enum": [
                "outliers"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for the outlier filter",
              "readOnly": true
            },
            "includeWaitTime": {
              "type": "boolean",
              "description": "Activity wait time"
            },
            "activity": {
              "type": "string"
            },
            "outlierLevel": {
              "type": "number",
              "description": "Level of the outlier filter from Strong (0.0) to Weak (5.0)",
              "minimum": 0,
              "maximum": 5
            },
            "range": {
              "type": "string",
              "description": "Filter selection type of lower, upper or both",
              "enum": [
                "lower",
                "upper",
                "both"
              ]
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            },
            "includeLeadTime": {
              "type": "boolean",
              "description": "Case lead time"
            },
            "includeServiceTime": {
              "type": "boolean",
              "description": "Activity service time"
            },
            "relation": {
              "type": "string"
            }
          }
        },
        "ParallelismFilter": {
          "type": "object",
          "required": [
            "filterType",
            "sourceActivity",
            "targetActivity",
            "matchCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Parallelism Filter",
              "enum": [
                "parallelism"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Parallelism filter",
              "readOnly": true
            },
            "sourceActivity": {
              "type": "string",
              "description": "Source Activity or Source Class"
            },
            "targetActivity": {
              "type": "string",
              "description": "Target Activity or Destination Class"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            },
            "multiProcess": {
              "type": "boolean",
              "description": "Indicates if the filter is MultiProcess (if the value is true) or Single Process (if the value is false)"
            }
          }
        },
        "RelationFilter": {
          "type": "object",
          "description": "Filter to verify if an activity directly follows the other",
          "required": [
            "filterType",
            "sourceActivity",
            "targetActivity",
            "matchCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Relation Filter",
              "enum": [
                "relation"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Relation Filter",
              "readOnly": true
            },
            "sourceActivity": {
              "type": "string",
              "description": "Source Activity or Source Class"
            },
            "targetActivity": {
              "type": "string",
              "description": "Target Activity or Destination Class"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "ReworkFilter": {
          "type": "object",
          "description": "Filter to be applied if there is rework for an activity",
          "required": [
            "filterType",
            "sourceActivity",
            "matchCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Rework Filter",
              "enum": [
                "rework"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Rework Filter",
              "readOnly": true
            },
            "sourceActivity": {
              "type": "string",
              "description": "Source Activity or Source Class"
            },
            "targetActivity": {
              "type": "string",
              "description": "Target Activity or Destination Class"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "ThroughputFilter": {
          "type": "object",
          "description": "Filter applied on the basis of throughput for a specific duration",
          "required": [
            "filterType",
            "operator",
            "timeUnit",
            "timeValue"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Throughput Filter",
              "enum": [
                "throughput"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Throughput Filter",
              "readOnly": true
            },
            "operator": {
              "type": "string",
              "description": "Operator to indicate durations that are more than or less than timeValue",
              "enum": [
                "LT",
                "LTE",
                "GTE",
                "GT"
              ]
            },
            "timeUnit": {
              "type": "string",
              "description": "Time Unit for Duration",
              "enum": [
                "NANOSECONDS",
                "MICROSECONDS",
                "MILLISECONDS",
                "SECONDS",
                "MINUTES",
                "HOURS",
                "DAYS"
              ]
            },
            "timeValue": {
              "type": "number",
              "description": "Value for Duration"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "TimeSpanFilter": {
          "type": "object",
          "description": "Filters activities based on TimeSpan",
          "required": [
            "filterType",
            "startTime",
            "endTime"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for TimeSpan Filter",
              "enum": [
                "timespan"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for TimeSpan Filter",
              "readOnly": true
            },
            "startTime": {
              "type": "string",
              "format": "date",
              "description": "Start date in the format yyyy-MM-dd'T'HH:mm:ssXXX"
            },
            "endTime": {
              "type": "string",
              "format": "date",
              "description": "End date in the format yyyy-MM-dd'T'HH:mm:ssXXX"
            },
            "inclusiveTimeSpan": {
              "type": "boolean",
              "description": "Bound time"
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "VariantFilter": {
          "type": "object",
          "description": "Filters activities based on a case variant",
          "required": [
            "filterType",
            "variant",
            "matchCases"
          ],
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Variant Filter",
              "enum": [
                "variant"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Variant Filter",
              "readOnly": true
            },
            "variant": {
              "type": "string",
              "description": "Filter a process based on Variant IDs. **Important:** To select multiple Variant IDs, separate each Variant ID using the pipe operator, | . "
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "DiscardFilter": {
          "type": "object",
          "description": "Filter to discard a particular activity from a process.  **Important:** DiscardFilter is not available in the list of filters in the input field of the transient filters.",
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Discard Filter",
              "enum": [
                "discard"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Discard filter",
              "readOnly": true
            },
            "activity": {
              "type": "string",
              "description": "Activity name selected to apply discard filter"
            }
          }
        },
        "ScriptFilter": {
          "type": "object",
          "description": "Filter to apply the custom business logic using JavaScript.  **Important:** ScriptFilter is not available in the list of filters in the input field of the transient filters.",
          "properties": {
            "filterType": {
              "type": "string",
              "description": "Filter type for Script Filter",
              "enum": [
                "script"
              ]
            },
            "label": {
              "type": "string",
              "description": "Descriptive label for Script filter",
              "readOnly": true
            },
            "matchCases": {
              "type": "boolean",
              "description": "If the value is \"true\", include the matched cases. If the value is \"false\", exclude the matched cases."
            }
          }
        },
        "GetFilterTemplates": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/GetFilterTemplateResponse"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "GetFilterTemplateResponse": {
          "type": "object",
          "properties": {
            "templateId": {
              "type": "string",
              "example": "64ef5cfed5b3d150b2b4a989",
              "description": "The unique ID of the filter template."
            },
            "name": {
              "type": "string",
              "example": "metric-filter-template",
              "description": "The name of the filter template."
            },
            "filters": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ArrayOfFilters"
              },
              "description": "The filters present in the filter template."
            },
            "owner": {
              "type": "string",
              "example": "test.user",
              "description": "The owner of the filter template."
            },
            "shared": {
              "type": "boolean",
              "example": false,
              "description": "Specifies whether the filter template is shared within the organization."
            }
          }
        },
        "JobKpiMismatchResponse": {
          "allOf": [
            {
              "$ref": "#/components/schemas/KpiMismatchResponse"
            },
            {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          ]
        },
        "KpiMismatchResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/KpiMismatch"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "KpiMismatch": {
          "type": "object",
          "properties": {
            "nodes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeKpi"
              }
            },
            "edges": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EdgeKpi"
              }
            }
          }
        },
        "NodeKpi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Node"
            },
            {
              "type": "object",
              "properties": {
                "kpiStatus": {
                  "$ref": "#/components/schemas/KpiLevel"
                }
              }
            }
          ]
        },
        "EdgeKpi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Edge"
            },
            {
              "type": "object",
              "properties": {
                "kpiStatus": {
                  "$ref": "#/components/schemas/KpiLevel"
                }
              }
            }
          ]
        },
        "KpiLevel": {
          "type": "string",
          "enum": [
            "warning",
            "critical"
          ],
          "description": "Shows the possible level of mismatches:\n  * warning - When the ```warningThreshold``` kpi is breached\n  * critical - When the ```criticalThreshold``` kpi is breached\n"
        },
        "JobStatus": {
          "type": "string",
          "enum": [
            "complete",
            "pending",
            "in_progress",
            "stopping",
            "error",
            "canceled"
          ],
          "description": "Status for the jobs submitted to execute in background:\n  * complete - Marks the job as completed processing\n  * pending - Indicates that the job is yet to start\n  * in_progress - Indicates that the job has started\n  * stopping - Indicates that the job is ending\n  * error - Indicates that the job has an error\n  * canceled - Indicates that the job is canceled\n"
        },
        "Variant": {
          "type": "object",
          "description": "An entity of the Case variants",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID of the Case variant"
            },
            "label": {
              "type": "string",
              "description": "Label of the Case variant"
            },
            "frequency": {
              "type": "number",
              "description": "Frequency of a Case variant"
            },
            "subProcessFrequency": {
              "type": "number",
              "description": "Subprocess frequency of a Case variant that is related to the process ID of a multiLevel process"
            },
            "ratio": {
              "type": "number",
              "description": "ratio of number of cases in a Case variant to total number of cases in a process"
            },
            "avgDuration": {
              "type": "number",
              "description": "Average duration of a Case variant"
            },
            "activityNames": {
              "type": "array",
              "description": "List of activities in a Case variant",
              "items": {
                "type": "string"
              }
            },
            "steps": {
              "type": "number",
              "description": "Count of the distinct activities in a Case variant"
            },
            "minTime": {
              "type": "number",
              "description": "Start time of the first activity in the Case variant"
            },
            "maxTime": {
              "type": "number",
              "description": "End time of last activity in the Case variant"
            },
            "totalCost": {
              "type": "number",
              "description": "The total cost of activities in a Case variant"
            },
            "avgCost": {
              "type": "number",
              "description": "The average cost of activities in a Case variant"
            },
            "subProcess": {
              "type": "string",
              "description": "Sub-process of a Case variant related to the process ID of a multilevel process"
            }
          }
        },
        "VariantDetails": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Variant"
              }
            },
            "totalElements": {
              "type": "number",
              "example": 24,
              "description": "Total number of Case variants for the process"
            },
            "pageSize": {
              "type": "number",
              "example": 4,
              "description": "Maximum number of Case variants that can be displayed in the current page"
            },
            "pageIndex": {
              "type": "number",
              "example": 0,
              "description": "The current page number"
            }
          }
        },
        "CustomMetricDetails": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "example": "var customMetric = {kpi: function(trace) {var myCustomCaseCost = 0;for(var k = 0 ; k < trace.size(); k++) {var event = trace.get(k); if(event.getEventClass() === 'Request created') {myCustomCaseCost += 1;}else if(event.getEventClass() === 'Evaluating Request (NO registered letter)') {myCustomCaseCost += 3;}}return myCustomCaseCost;}};",
              "description": "The custom script that is used to create a custom metric."
            },
            "originalName": {
              "type": "string",
              "example": "custom Cost",
              "description": "The name of the custom metric provided by the user."
            },
            "metricName": {
              "type": "string",
              "example": "CUSTOM_COST",
              "description": "The name of the custom metric to be used in Filters."
            },
            "metricType": {
              "type": "string",
              "example": "number",
              "description": "The type of the custom metric."
            },
            "showCustomMetricStatistics": {
              "type": "boolean",
              "example": true,
              "description": "Toggle to show or hide the statistics of the custom metric in the Model tab, Statistics tab, and Compare tab."
            },
            "invalid": {
              "type": "boolean",
              "example": true,
              "description": "Indicates if the custom metric is valid or not."
            },
            "unit": {
              "type": "boolean",
              "example": "Euro",
              "description": "Unit of the custom metric result that must be displayed in the Model tab, Statistics tab, and Compare tab."
            },
            "metricDescription": {
              "type": "string",
              "example": "My custom cost of the process",
              "description": "The description of the custom metric."
            },
            "customMetricCategory": {
              "type": "object",
              "properties": {
                "categoryName": {
                  "type": "string",
                  "example": "Amount",
                  "description": "The name of the custom metric category provided by the user."
                },
                "categoryDescription": {
                  "type": "string",
                  "example": "Category that group custom metrics based on the amount.",
                  "description": "The description of the custom metric category."
                }
              }
            }
          }
        },
        "CreateBackup": {
          "type": "object",
          "required": [
            "name",
            "includedTypes"
          ],
          "properties": {
            "name": {
              "type": "string",
              "example": "Accounts_Payable_backup",
              "description": "A name to identify the process backup."
            },
            "includedTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "core-kv-activity-cost",
                  "core-kv-resource-cost",
                  "core-kv-activity-fte",
                  "core-kv-role-cost",
                  "core-mapping",
                  "core-settings",
                  "core-templates",
                  "core-project-settings",
                  "core-ref-model",
                  "analytics-dashboards",
                  "core-alias",
                  "core-end-activities",
                  "translations",
                  "core-simulation",
                  "custom-metric",
                  "streaming",
                  "monitoring"
                ]
              },
              "description": "The components that are added to the backup."
            }
          }
        },
        "CreateBackupResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "backupId": {
                  "type": "string",
                  "description": "A unique ID for the process backup.",
                  "example": "632a2b8803d97e6c387b6985"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ProjectStatusDetails": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "READY",
              "description": "'INCOMPLETE' happen when is needed to run a mining in order to obtain an updated model; 'MINING_IN_PROGRESS' when there is a mining ongoing; 'READY' when there is a model and no mining ongoing; 'ERROR' when an error occurred during the last mining."
            },
            "message": {
              "type": "string",
              "example": "Event log updated on 2022-11-15T09:07:57.051Z",
              "description": "General message in accordance to the project status."
            }
          }
        },
        "Tenant": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "cognitive",
              "description": "Name of the tenant."
            },
            "owner": {
              "type": "string",
              "example": "cognitive",
              "description": "If an `owner` is entered, it is possible to work in multi-tenancy mode."
            },
            "defaultCurrency": {
              "type": "string",
              "enum": [
                "EUR",
                "USD",
                "CAD",
                "AUD",
                "CHF",
                "AED",
                "GBP",
                "CNY",
                "JPY",
                "BRL",
                "COP",
                "ARS",
                "PEN",
                "RON",
                "RUB",
                "KRW"
              ],
              "description": "The selected currency is used as the default value in the project."
            },
            "customColumnLimit": {
              "type": "number",
              "example": 80,
              "description": "The number of custom columns that can be mapped in a project."
            },
            "lastModifiedUser": {
              "type": "string",
              "example": "sam.john",
              "readOnly": true,
              "description": "Last Modified user."
            },
            "passwordPolicy": {
              "type": "object",
              "description": "This is not valid when the product configuration uses an LDAP, SAML, or OCP IAM identity provider.",
              "properties": {
                "maxHistoryDepth": {
                  "type": "integer",
                  "example": 1,
                  "description": "The maximum number of passwords saved in the history. This ensures that the user does not reuse an earlier password."
                },
                "maxAge": {
                  "type": "integer",
                  "example": 9999,
                  "description": "The maximum number of days for password expiration."
                },
                "maxLength": {
                  "type": "integer",
                  "example": 100,
                  "description": "The maximum length of the password."
                },
                "minLength": {
                  "type": "integer",
                  "example": 8,
                  "description": "The minimum length of the password."
                },
                "minDigit": {
                  "type": "integer",
                  "example": 1,
                  "description": "The minimum number of digits that a user can include in a password."
                },
                "minSpecialCharacter": {
                  "type": "integer",
                  "example": 1,
                  "description": "The minimum number of special characters that a user can include in a password."
                },
                "minUpperCharacter": {
                  "type": "integer",
                  "example": 1,
                  "description": "The minimum number of uppercase letters that a user can include in a password."
                },
                "minLowerCharacter": {
                  "type": "integer",
                  "example": 1,
                  "description": "The minimum number of lowercase letters that a user can include in a password."
                }
              }
            },
            "lockingAccountPolicy": {
              "type": "object",
              "description": "This is not valid when the product configuration uses an LDAP, SAML, or OCP IAM identity provider.",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "example": false,
                  "description": "Use the `enabled` toggle to enable the lock policy."
                },
                "maxPasswordFailuresNumber": {
                  "type": "integer",
                  "example": 3,
                  "description": "The maximum number of consecutive attempts that is available for the user after entering an incorrect password. If the user enters an incorrect password more that the number defined in the field, `maxPasswordFailuresNumber`, the user is locked out of the account."
                },
                "maxPasswordFailuresTimeFrame": {
                  "type": "integer",
                  "example": 5,
                  "description": "The time interval for committing maximum number of password failures."
                },
                "lastLoginMaxAge": {
                  "type": "integer",
                  "example": 5,
                  "description": "The maximum interval of time from the latest login."
                }
              }
            },
            "defaultRPAVendor": {
              "type": "string",
              "description": "RPA vendor",
              "enum": [
                "IBM_RPA"
              ]
            },
            "lastModifiedDate": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "Last modified date."
            },
            "tenantId": {
              "type": "string",
              "example": "cognitive",
              "description": "Tenant ID",
              "readOnly": true
            }
          }
        },
        "TenantResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/Tenant"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "TenantBatchResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "AccountResponse": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ExtendedAccountInfo"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "Group": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "example": "AccountsPayableGroup",
              "description": "The name of the user group."
            }
          }
        },
        "GroupResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "string",
                  "description": "The unique ID of the user group.",
                  "example": "632a2b8803d97e6c387b6985"
                },
                "groupName": {
                  "type": "string",
                  "description": "The name of the user group.",
                  "example": "AccountsPayableGroup"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "GroupListResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "string",
                    "description": "The unique ID of the user group.",
                    "example": "632a2b8803d97e6c387b6985"
                  },
                  "groupName": {
                    "type": "string",
                    "description": "The name of the user group.",
                    "example": "AccountsPayableGroup"
                  }
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "Authorization": {
          "type": "object",
          "required": [
            "subjectType",
            "subjectId",
            "type",
            "permissions",
            "resourceType"
          ],
          "properties": {
            "subjectType": {
              "type": "string",
              "enum": [
                "User",
                "Group"
              ],
              "example": "Group",
              "description": "User or user group to which an authorization is assigned to."
            },
            "subjectId": {
              "type": "string",
              "example": "646fb99bd57dd5244f73febc",
              "description": "The name of the user or the user group per the selected subjectType (User or Group) for the assigned authorization."
            },
            "type": {
              "type": "string",
              "enum": [
                "Grant",
                "Revoke"
              ],
              "example": "Grant",
              "description": "The type of privilege granted to the user or the user group for the permissions in authorization."
            },
            "permissions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Permissions"
              },
              "example": [
                "read",
                "write",
                "create",
                "filter"
              ],
              "description": "The list of permissions of an authoirization assigned to a user or user group."
            },
            "resourceType": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceTypes"
              },
              "example": "BPA_PROCESS_MODEL",
              "description": "The type of resource allocated to a user or user group for authorization."
            },
            "targetResources": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "organizationId",
                      "projectId"
                    ]
                  }
                ]
              },
              "example": {
                "organizationId": "620289aaac86984c86308157"
              },
              "description": "The organizationId or the projectId assigned to a user or user group for authorization."
            }
          }
        },
        "AuthorizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "authorizationId": {
                  "type": "string",
                  "example": "6451438aedc6de0c1b1b1b5e",
                  "description": "The unique ID of the authorization."
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "AuthorizationListResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "authorizationId": {
                  "type": "string",
                  "example": "716fb99bd57dd5244f73fafd",
                  "description": "The unique ID of the authorization."
                },
                "subjectType": {
                  "type": "string",
                  "enum": [
                    "User",
                    "Group"
                  ],
                  "example": "Group",
                  "description": "User or user group to which an authorization is assigned to."
                },
                "subjectId": {
                  "type": "string",
                  "example": "646fb99bd57dd5244f73febc",
                  "description": "The name of the user or the user group per the selected subjectType (User or Group) for the assigned authorization."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Grant",
                    "Revoke"
                  ],
                  "example": "Grant",
                  "description": "The type of privilege granted to the user or the user group for the permissions in authorization."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  "example": [
                    "read",
                    "write",
                    "create",
                    "filter"
                  ],
                  "description": "The list of permissions of an authoirization assigned to a user or user group."
                },
                "resourceType": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceTypes"
                  },
                  "example": "BPA_PROCESS_MODEL",
                  "description": "The type of resource allocated to a user or user group for authorization."
                },
                "targetResources": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "organizationId",
                          "projectId"
                        ]
                      }
                    ]
                  },
                  "example": {
                    "organizationId": "620289aaac86984c86308157"
                  },
                  "description": "The organizationId or the projectId assigned to a user or user group for authorization."
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "GroupAuthorizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "authorizationId": {
                  "type": "string",
                  "example": "716fb99bd57dd5244f73fafd",
                  "description": "The unique ID of the authorization."
                },
                "subjectType": {
                  "type": "string",
                  "enum": [
                    "User",
                    "Group"
                  ],
                  "example": "Group",
                  "description": "User group to which an authorization is assigned."
                },
                "subjectId": {
                  "type": "string",
                  "example": "646fb99bd57dd5244f73febc",
                  "description": "The name of the user group."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Grant",
                    "Revoke"
                  ],
                  "example": "Grant",
                  "description": "The type of privilege granted to the user or the user group for the permissions in authorization."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  "example": [
                    "read",
                    "write",
                    "create",
                    "filter"
                  ],
                  "description": "The list of permissions of an authoirization assigned to a user group."
                },
                "resourceType": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceTypes"
                  },
                  "example": 10,
                  "description": "The type of resource allocated to auser group for authorization."
                },
                "targetResources": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "organizationId",
                          "projectId"
                        ]
                      }
                    ]
                  },
                  "example": {
                    "organizationId": "620289aaac86984c86308157"
                  },
                  "description": "The organizationId or the projectId assigned to a user group for authorization."
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "PatchAuthorizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "authorizationId": {
                  "type": "string",
                  "example": "716fb99bd57dd5244f73fafd",
                  "description": "The unique ID of the authorization."
                },
                "subjectType": {
                  "type": "string",
                  "enum": [
                    "User",
                    "Group"
                  ],
                  "example": "Group",
                  "description": "User or user group to which an authorization is assigned."
                },
                "subjectId": {
                  "type": "string",
                  "example": "646fb99bd57dd5244f73febc",
                  "description": "The name of the user or the user group per the selected subjectType (User or Group) for the assigned authorization."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Grant",
                    "Revoke"
                  ],
                  "example": "Grant",
                  "description": "The type of privilege granted to the user or the user group for the permissions in authorization."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  "example": [
                    "read",
                    "write",
                    "create",
                    "filter",
                    "configure",
                    "share",
                    "datasource"
                  ],
                  "description": "The list of permissions of an authoirization assigned to a user or user group."
                },
                "resourceType": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceTypes"
                  },
                  "example": "BPA_PROCESS_MODEL",
                  "description": "The type of resource allocated to a user or user group for authorization."
                },
                "targetResources": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "organizationId",
                          "projectId"
                        ]
                      }
                    ]
                  },
                  "example": {
                    "organizationId": "620289aaac86984c86308157"
                  },
                  "description": "The organizationId or the projectId assigned to a user or user group for authorization."
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "UserAuthorizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "authorizationId": {
                  "type": "string",
                  "example": "716fb99bd57dd5244f73fafd",
                  "description": "The unique ID of the authorization."
                },
                "subjectType": {
                  "type": "string",
                  "enum": [
                    "User",
                    "Group"
                  ],
                  "example": "User",
                  "description": "User to which an authorization is assigned."
                },
                "subjectId": {
                  "type": "string",
                  "example": "maintenance.admin",
                  "description": "The name of the user."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Grant",
                    "Revoke"
                  ],
                  "example": "Grant",
                  "description": "The type of privilege granted to the user or the user group for the permissions in authorization."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  "example": [
                    "read",
                    "write",
                    "create",
                    "filter"
                  ],
                  "description": "The list of permissions of an authoirization assigned to a user."
                },
                "resourceType": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceTypes"
                  },
                  "example": "BPA_PROCESS_MODEL",
                  "description": "The type of resource allocated to a user for authorization."
                },
                "targetResources": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "organizationId",
                          "projectId"
                        ]
                      }
                    ]
                  },
                  "example": {
                    "organizationId": "620289aaac86984c86308157"
                  },
                  "description": "The organizationId or the projectId assigned to a user for authorization."
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "DeleteAuthorizationResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "example": "6451438aedc6de0c1b1b1b5e",
                  "description": "The authorizationId to be deleted."
                }
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "DeleteGroupResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "example": "632a2b8803d97e6c387b6985",
                  "description": "The groupId to be deleted."
                }
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "DeleteUserResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "example": "632a2b8803d97e6c387b6985",
                  "description": "The userId deleted from the group."
                }
              }
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "ResourceTypes": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "TENANT",
                "PROJECT",
                "ORGANIZATION",
                "MONITOR",
                "MONITORSERVICE",
                "ANALYTICS_DASHBOARD",
                "BPA_PROCESS_MODEL",
                "BPA_DERIVED_MODEL",
                "BPA_APPLICATION_LANDSCAPE",
                "BPA_ORGANIZATION_LANDSCAPE",
                "BPA_PROCESS_LANDSCAPE",
                "BPA_ATTACHMENT",
                "BPA_SETTINGS",
                "BPA_SIMULATION",
                "BPA_DMN",
                "SUITE_BPA",
                "SUITE_ANALYTICS",
                "SUITE_PROCESSMINING",
                "SUITE_MONITORACTION",
                "ADMIN_USR_MGM",
                "ADMIN_TENANT",
                "ADMIN_MULTI_TENANT",
                "TM_PROJECTS",
                "TM_MONITORING_LIST",
                "TM_DECRYPT",
                "TM_PRIVACY",
                "TM_TAGGING",
                "TM_RPA_SCRIPT"
              ]
            }
          ]
        },
        "Permissions": {
          "type": "string",
          "enum": [
            "READ",
            "WRITE",
            "CREATE",
            "SHARE",
            "CONFIGURE",
            "CREATE_PACKAGE",
            "DEPLOY_PACKAGE",
            "FILTER",
            "REF_MODEL",
            "DATASOURCE",
            "INVENIO_DASHBOARD",
            "SOCIAL_NET",
            "ACTIVITY_MAP",
            "CONFORMANCE_CHECK",
            "EXPORT_BPMN",
            "DIFF_ANALYSIS",
            "SIMULATION",
            "BUSINESS_RULE_MINING",
            "ORG_VIEW_MEMBERS",
            "MONITOR",
            "ACCELERATOR",
            "MONITORSERVICE",
            "CUSTOM_ACCELERATOR"
          ]
        },
        "User": {
          "type": "object",
          "required": [
            "username"
          ],
          "properties": {
            "username": {
              "type": "string",
              "example": "maintenance.admin",
              "description": "The username of the user."
            }
          }
        },
        "UserResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "The unique ID of the user.",
                  "example": "6318141998d3ed39189df235"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the user.",
                  "example": "AccountsPayableGroup"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "UsersListResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the user.",
                  "example": "62a2582fcc01220393f937db"
                },
                "username": {
                  "type": "string",
                  "description": "The name of the user.",
                  "example": "maintenance.admin"
                },
                "email": {
                  "type": "string",
                  "description": "The email id of the user.",
                  "example": "maintenance.admin@domain.com"
                },
                "firstName": {
                  "type": "string",
                  "description": "The first name of the user.",
                  "example": "maintenance"
                },
                "lastName": {
                  "type": "string",
                  "description": "The last name of the user.",
                  "example": "admin"
                }
              }
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "GeneralSettingsResponse": {
          "type": "object",
          "description": "Response of the GeneralSettings API.",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/GeneralSettings"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "GeneralSettings": {
          "type": "object",
          "properties": {
            "computeDurationInBusinessHours": {
              "type": "boolean",
              "description": "Set computeDurationInBusinessHours to On if the IBM Process Mining application must compute the duration (service and waiting time of the process) by using only the defined business hours.",
              "example": true
            },
            "excludeWeekends": {
              "type": "boolean",
              "description": "Set excludeWeekends to On if the application must exclude Saturdays and Sundays when it computes service and waiting time. Set excludeWeekends to Off if the application must include Saturdays and Sundays when it computes the service and waiting time.",
              "example": true
            },
            "businessHours": {
              "type": "string",
              "example": "9-11",
              "description": "Mention the defined time range that the application must consider as the business hours instead of 24 hours. You must use the 24-hour time format when you define the business hours."
            },
            "selectedCalendars": {
              "type": "array",
              "description": "Build and manage calenders for the process.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "3rvsu7367378823gdbnfb",
                    "description": "Unique ID for the calendar."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the calendar.",
                    "example": "Production Team"
                  },
                  "dates": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2019-11-14T00:55:31.820Z",
                      "2016-09-13T23:30:52.123Z"
                    ]
                  },
                  "vacationType": {
                    "type": "array",
                    "description": "The type of the vacation.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample"
                    ]
                  }
                }
              }
            },
            "automatedFieldTruthValue": {
              "type": "string",
              "description": "The attribute that describes the automatic events from the manual events.",
              "example": "Robot"
            },
            "automatedActivityAttribute": {
              "type": "string",
              "description": "Define the value of the automated activity attribute box that identifies the automatic events.",
              "example": "Opp Band"
            },
            "customExcludedFields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Opp band",
                "Opp tree"
              ],
              "description": "One or more custom attributes that you want to exclude from the compliance analysis, root-cause analysis, and influencers."
            },
            "timeZoneOffset": {
              "type": "string",
              "description": "Value that represents dates by using the chosen time-zone offset.",
              "example": "+0200"
            },
            "defaultPage": {
              "type": "string",
              "description": "Use this parameter to set the default page of the IBM Process Mining application. You can set this parameter to either `Model` or `Analytics`. When you select Model, IBM Process Mining directs you to the process visualization in the Model page whenever a process is selected. When you select Analytics, IBM Process Mining directs you to the process visualization in the Model page whenever a process is selected.",
              "enum": [
                "Model",
                "Analytics"
              ],
              "example": "Analytics"
            },
            "displayReferenceActivities": {
              "type": "boolean",
              "description": "When displayReferenceActivities is set to On, IBM Process Mining does not hide the reference model activities, even when you set the activity complexity to 1%.",
              "example": true
            },
            "keepDefinedRoles": {
              "type": "boolean",
              "description": "When keepDefinedRoles is set to On, IBM Process Mining maintains any role-resource manual assignments that are made on the Social Network whenever you upload a new data source for the process.",
              "example": true
            },
            "defaultMetric": {
              "type": "string",
              "enum": [
                "median",
                "avg"
              ],
              "description": "Default metric in statistics",
              "example": "median"
            },
            "projectCurrency": {
              "type": "string",
              "description": "The value of currency used in the project.",
              "example": "USD"
            },
            "enableRunningTime": {
              "type": "boolean",
              "description": "When you set enableRunningTime slider to On, the Refresh button on the Model page is enabled whenever you select the Running Cases filter for a process.",
              "example": true
            },
            "modelRelationDetails": {
              "type": "integer",
              "example": 1,
              "description": "The percentage of relations between the activities. By increasing this percentage, less frequent paths become visible, allowing a more detailed (although less readable and user-friendly) process visualization."
            },
            "modelActivityDetail": {
              "type": "string",
              "example": 100,
              "description": "The percentage of visible activities. A low percentage of detail makes the model display only the most frequent activities."
            },
            "blueWorksliveProcess": {
              "type": "string",
              "example": "sample",
              "description": "Name of the blueWorklive processes that are integrated with IBM Process Mining."
            },
            "defaultBucketLimit": {
              "type": "number",
              "example": 23,
              "description": "The defaultBucketLimit API is used by the process analysis to split timeline in buckets and make calculations about concurrency, bottlenecks, and parallelisms."
            }
          }
        },
        "ActivityCostListResponse": {
          "type": "object",
          "description": "Response of the ActivityCost settings API.",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ActivityCostList"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ActivityCostList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ActivityCost"
          }
        },
        "ActivityCost": {
          "required": [
            "activity",
            "type",
            "cost"
          ],
          "properties": {
            "activity": {
              "type": "string",
              "description": "Name of the activity.",
              "example": "Amend Purchase Requisition",
              "readOnly": true
            },
            "cost": {
              "type": "number",
              "description": "Cost of the activity.",
              "example": 1
            },
            "type": {
              "type": "string",
              "enum": [
                "Automatic",
                "Manual",
                "Any"
              ],
              "description": "Define whether the cost value refers to manual activity, the automatic activity, or both.",
              "example": "Manual"
            },
            "endDate": {
              "type": "string",
              "format": "date",
              "description": "Define the date until which the specified cost must be applied to the activity. You must define the date in ISO Date format in UTC.",
              "example": "2019-11-14T00:00:00.000Z"
            }
          }
        },
        "ResourceCostListResponse": {
          "type": "object",
          "description": "Response of the resource cost settings API.",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ResourceCostList"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ResourceCostList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ResourceCost"
          }
        },
        "ResourceCost": {
          "required": [
            "resource",
            "hourlyCost"
          ],
          "properties": {
            "resource": {
              "type": "string",
              "description": "Name of the resource.",
              "example": "Anna kaulfman",
              "readOnly": true
            },
            "hourlyCost": {
              "type": "number",
              "description": "Hourly cost of the resource.",
              "example": 6
            },
            "endDate": {
              "type": "string",
              "format": "date",
              "description": "The date until which the specified cost must be considered for the resource. You must define the date in ISO Date format in UTC.",
              "example": "2019-11-14T00:00:00.000Z"
            }
          }
        },
        "ActivityWorkingTimeListResponse": {
          "type": "object",
          "description": "Response of the Activity Working Time settings API.",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/ActivityWorkingTimeList"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ActivityWorkingTimeList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ActivityWorkingTime"
          }
        },
        "ActivityWorkingTime": {
          "required": [
            "activity",
            "type",
            "value"
          ],
          "properties": {
            "activity": {
              "type": "string",
              "description": "Name of the activity.",
              "example": "Amend Purchase Requisition",
              "readOnly": true
            },
            "type": {
              "type": "string",
              "enum": [
                "Automatic",
                "Manual",
                "Any"
              ],
              "description": "Define the type of the activity, for example, automatic or manual.",
              "example": "Automatic"
            },
            "value": {
              "type": "number",
              "description": "Time duration for the activity in hours.",
              "example": 110
            },
            "endDate": {
              "type": "string",
              "format": "date",
              "description": "End date until which the specified working time must be applied to the activity.You must define the date in ISO Date format in UTC.",
              "example": "2019-11-14T00:00:00.000Z"
            }
          }
        },
        "RoleCostListResponse": {
          "type": "object",
          "description": "Response of the Role Costsettings API.",
          "properties": {
            "data": {
              "$ref": "#/components/schemas/RoleCostList"
            },
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "RoleCostList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/RoleCost"
          }
        },
        "RoleCost": {
          "type": "object",
          "required": [
            "role",
            "hourlyCost"
          ],
          "properties": {
            "role": {
              "type": "string",
              "description": "Name of the role.",
              "example": "Requester",
              "readOnly": true
            },
            "hourlyCost": {
              "type": "number",
              "description": "Hourly cost of the role.",
              "example": 2
            },
            "endDate": {
              "type": "string",
              "format": "date",
              "description": "Define the date until which the specified cost must be considered for the role. You must define the date in ISO Date format in UTC.",
              "example": "2019-11-14T00:00:00.000Z"
            }
          }
        }
      },
      "responses": {
        "InvalidAuth": {
          "description": "Unauthorized",
          "content": {
            "text/html": {
              "examples": {
                "Token not provided": {
                  "value": "Unauthorized request"
                },
                "Token empty": {
                  "value": "Invalid Token"
                },
                "Token expired or not valid": {
                  "value": "Invalid Token"
                }
              }
            }
          }
        },
        "CustomQueryError": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "examples": {
                "Error evaluating expression": {
                  "value": {
                    "error": 1022,
                    "data": "Error evaluating expression",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequest": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForPost": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForCreateBackup": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                },
                "Invalid Included Types": {
                  "value": {
                    "error": 1062,
                    "data": "File types [core-kv-cost, core-project] not supported.",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForFilter": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Filters not valid": {
                  "value": {
                    "error": 1041,
                    "data": "Invalid filters provided as follows: [(<filterType> --<filterIdentifier>-- is invalid: <errorMessage>)]",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForVariants": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Page number should be positive or zero": {
                  "value": {
                    "error": 1042,
                    "data": "Page number should be positive number or zero",
                    "success": false
                  }
                },
                "Page size should be positive or zero": {
                  "value": {
                    "error": 1043,
                    "data": "Page size should be positive number or zero",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidProcessVariable": {
          "description": "Variable not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1039
                  },
                  "data": {
                    "type": "string",
                    "example": "The process variable, counter22, is not found in the procure project"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForCreateTenant": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Tenant name not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Invalid tenant name",
                    "success": false
                  }
                },
                "Tenant already exists": {
                  "value": {
                    "error": 1001,
                    "data": "Tenant already exists",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                },
                "Currency not valid": {
                  "value": {
                    "error": 1062,
                    "data": "Invalid currency",
                    "success": false
                  }
                },
                "Default RPA Vendor not valid": {
                  "value": {
                    "error": 1062,
                    "data": "Invalid RPA Vendor",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForCreateAccount": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Account already exists": {
                  "value": {
                    "error": 1001,
                    "data": "Account already exists",
                    "success": false
                  }
                },
                "Country code not valid": {
                  "value": {
                    "error": 1002,
                    "data": "Invalid country code. Country must be in ISO 3166-1 alpha-2 standard",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                },
                "Mandatory parameters are missing": {
                  "value": {
                    "error": 1062,
                    "data": "Missing mandatory parameters",
                    "success": false
                  }
                },
                "Username not valid": {
                  "value": {
                    "error": 1062,
                    "data": "Username should have 6 characters or more",
                    "success": false
                  }
                },
                "Password not valid": {
                  "value": {
                    "error": 1062,
                    "data": "Your password must have minimum <8> character(s) and maximum <20> character(s) that contain atleast <1> uppercase letter(s), <1> lowercase letter(s), <1> special character(s), and <1> number(s)",
                    "success": false
                  }
                },
                "Email not valid": {
                  "value": {
                    "error": 1062,
                    "data": "Invalid email",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForQuery": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "TenantIdNotFound": {
          "description": "Tenant not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1039
                  },
                  "data": {
                    "type": "string",
                    "example": "Tenant cognitive is not found"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "AccountIdNotFound": {
          "description": "Account not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1040
                  },
                  "data": {
                    "type": "string",
                    "example": "Account id 657895439008765 is not found for the given tenant"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "ReferenceModelNotFound": {
          "description": "Reference Model not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1035
                  },
                  "data": {
                    "type": "string",
                    "example": "Reference model is not found for this project"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "InputNotFound": {
          "description": "input parameter is not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1001
                  },
                  "data": {
                    "type": "string",
                    "example": "Organization with key tutorials is not found"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              },
              "examples": {
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "The organization with the key, TutorialsOrg, is not found.",
                    "success": false
                  }
                },
                "AccountId not found": {
                  "value": {
                    "error": 1054,
                    "data": "Account id 63760075bba1101abad6c9db is not found",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidInput": {
          "description": "input parameter is not valid",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1001
                  },
                  "data": {
                    "type": "string",
                    "example": "Organization key is not valid"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              },
              "examples": {
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Organization key is not valid",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "ActivityNotFound": {
          "description": "Activity not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1034
                  },
                  "data": {
                    "type": "string",
                    "example": "Activity not found"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "EdgeNotFound": {
          "description": "Edge not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1036
                  },
                  "data": {
                    "type": "string",
                    "example": "Edge not found"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "ErrorKpiMismatch": {
          "description": "Error retrieving KPI mismatch",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1022
                  },
                  "data": {
                    "type": "string",
                    "example": "Error retrieving KPI mismatch"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "InvalidOrganizationName": {
          "description": "Organization Name is not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1036
                  },
                  "data": {
                    "type": "string",
                    "example": "The organization name, TutorialsOrg is not found"
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "NoGroupFound": {
          "description": "No group found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": "1088L"
                  },
                  "data": {
                    "type": "string",
                    "example": "Unable to delete the group. No matching groupId found."
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "GroupIdNotFound": {
          "description": "GroupId not found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1084
                  },
                  "data": {
                    "type": "string",
                    "example": "Unable to delete the group. No matching groupId found."
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "UserIdNotFound": {
          "description": "User not found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1085
                  },
                  "data": {
                    "type": "string",
                    "example": "Unable to delete the user from the group. No matching groupId & accountId found."
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "AuthorizationIdNotFound": {
          "description": "AuthorizationId not found for deletion.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "integer",
                    "example": 1086
                  },
                  "data": {
                    "type": "string",
                    "example": "Unable to delete the authorization. No matching authorizationId found."
                  },
                  "success": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "UpdateAuthorizationNotFound": {
          "description": "AuthorizationId not found for updation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "Unable to update the authorization. No matching authorizationId found."
                  },
                  "error": {
                    "type": "integer",
                    "example": 1087
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "GroupUsersNotFound": {
          "description": "Users not found for the group.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "No users found for the group with id, 632a2b8803d97e6c387b6985"
                  },
                  "error": {
                    "type": "integer",
                    "example": 1080
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "TenantAuthorizationsNotFound": {
          "description": "Authorizations not found for the tenant.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "No authorizations found for the tenant, cognitive."
                  },
                  "error": {
                    "type": "integer",
                    "example": 1081
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "GroupAuthorizationsNotFound": {
          "description": "Authorizations not found for the group.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "No authorizations found for the group."
                  },
                  "error": {
                    "type": "integer",
                    "example": 1082
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "UserAuthorizationsNotFound": {
          "description": "Authorizations not found for the user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "No authorizations found for the user."
                  },
                  "error": {
                    "type": "integer",
                    "example": 1083
                  },
                  "success": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForExportDashboard": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                },
                "Dashboard not found": {
                  "value": {
                    "error": 1109,
                    "data": "Dashboard not found",
                    "success": false
                  }
                }
              }
            }
          }
        },
        "InvalidRequestForFilterTemplate": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringResponse"
              },
              "examples": {
                "Organization not provided": {
                  "value": {
                    "error": 1001,
                    "data": "Parameter org is null",
                    "success": false
                  }
                },
                "Organization not found": {
                  "value": {
                    "error": 1001,
                    "data": "Organization with key <org> not found",
                    "success": false
                  }
                },
                "Organization not valid": {
                  "value": {
                    "error": 1001,
                    "data": "Project org not valid",
                    "success": false
                  }
                },
                "Project not found": {
                  "value": {
                    "error": 1002,
                    "data": "Project with name <projectKey> not found in organization <org>",
                    "success": false
                  }
                },
                "Request error": {
                  "value": {
                    "error": 1025,
                    "data": "Request is not well formed",
                    "success": false
                  }
                },
                "Filter Template not Found": {
                  "value": {
                    "error": 1112,
                    "data": "No filter templates found for the project.",
                    "success": false
                  }
                }
              }
            }
          }
        }
      },
      "parameters": {
        "projectKey": {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "description": "Project Key",
          "schema": {
            "type": "string",
            "example": "myprocess"
          }
        },
        "userId": {
          "name": "uid",
          "in": "query",
          "required": false,
          "deprecated": true,
          "description": "API Account (Deprecated, it can still be present but is no longer used for authentication and will be permanently removed in a future release)",
          "schema": {
            "type": "string"
          },
          "example": "user.pm"
        },
        "tenantId": {
          "name": "tenantId",
          "in": "query",
          "required": false,
          "description": "Tenant Id",
          "schema": {
            "type": "string",
            "example": "myTenant"
          }
        },
        "checkTenantName": {
          "name": "checkTenantName",
          "in": "query",
          "required": true,
          "description": "Tenant Name",
          "schema": {
            "type": "string",
            "example": "myTenant"
          }
        },
        "tenantId_Path": {
          "name": "tenantId",
          "in": "path",
          "required": true,
          "description": "Tenant Id",
          "schema": {
            "type": "string",
            "example": "myTenant"
          }
        },
        "accountId_Path": {
          "name": "accountId",
          "in": "path",
          "required": true,
          "description": "Account Id",
          "schema": {
            "type": "string",
            "example": 6785425789000908
          }
        },
        "userIdToDelete_Path": {
          "name": "userIdToDelete",
          "in": "path",
          "required": true,
          "description": "User Id to delete",
          "schema": {
            "type": "string",
            "example": "632a2b8803d97e6c387b6975"
          }
        },
        "userIdForReplace": {
          "name": "userIdForReplace",
          "in": "query",
          "required": false,
          "description": "User Id to take ownership of objects linked to the deleted user (if not provided the objects are deleted as well)",
          "schema": {
            "type": "string",
            "example": "632a2b8803d97e6c387b6985"
          }
        },
        "force": {
          "name": "force",
          "in": "query",
          "required": false,
          "description": "Flag to force deletion when the user owns some objects",
          "schema": {
            "type": "string",
            "example": "true"
          }
        },
        "serverTime": {
          "name": "ts",
          "in": "query",
          "required": false,
          "deprecated": true,
          "description": "Timestamp in milliseconds (Deprecated, it can still be present but is no longer used for authentication and will be permanently removed in a future release)",
          "schema": {
            "type": "string"
          },
          "example": "1599831150683"
        },
        "sign": {
          "name": "sign",
          "in": "query",
          "required": false,
          "deprecated": true,
          "description": "API Signature (Deprecated, it can still be used to provide the JWT Token but it will be removed and permanently replaced by the Bearer Token in the 'Authorization' header in a future version)",
          "schema": {
            "type": "string"
          },
          "example": "dp845Vr9gGVnyeWbPMCrjwX3T/t/otYupuEdcwDSI1w="
        },
        "organization": {
          "name": "org",
          "in": "query",
          "required": true,
          "allowEmptyValue": true,
          "description": "Organization Key (leave it empty for private projects)",
          "schema": {
            "type": "string"
          },
          "example": "4d725f50"
        },
        "processVariable": {
          "name": "variable",
          "in": "path",
          "required": true,
          "description": "Variable name",
          "schema": {
            "type": "string"
          },
          "example": "counter"
        },
        "jobId": {
          "name": "jobId",
          "in": "path",
          "required": true,
          "description": "Job Id",
          "schema": {
            "type": "string",
            "example": "61147cc22d1201f6e2d85c23"
          }
        },
        "activityName": {
          "name": "activityName",
          "in": "path",
          "required": true,
          "allowEmptyValue": true,
          "description": "Name of the activity.",
          "schema": {
            "type": "string",
            "example": "Start"
          }
        },
        "startActivity": {
          "name": "startActivity",
          "in": "query",
          "required": true,
          "allowEmptyValue": true,
          "description": "Start Activity name",
          "schema": {
            "type": "string",
            "example": "Start"
          }
        },
        "endActivity": {
          "name": "endActivity",
          "in": "query",
          "required": true,
          "allowEmptyValue": true,
          "description": "End Activity name",
          "schema": {
            "type": "string",
            "example": "Start"
          }
        },
        "measure": {
          "name": "measure",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "Measure of different duration values of an activity or a relation which is used to compute the KPI mismatch.",
          "schema": {
            "type": "string",
            "enum": [
              "avgDuration",
              "minDuration",
              "medianDuration",
              "maxDuration"
            ],
            "default": "avgDuration"
          },
          "example": "avgDuration"
        },
        "page": {
          "name": "page",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "The current page number",
          "schema": {
            "type": "number",
            "example": 0,
            "default": 0
          }
        },
        "size": {
          "name": "size",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "Maximum number of Case variants that needs to be displayed in the current page",
          "schema": {
            "type": "number",
            "example": 30,
            "default": 30
          }
        },
        "attributeKey": {
          "name": "attributeKey",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "This API retrieves statistics of Case variants related to an attribute. You can select a default or custom attribute to view the statistics of Case variants. If the **Model** represents a multilevel process, you can view the statistics of Case variants linked to multiple **Process id**s (for example, **process-1, process-2, process-3** and so on). By default, the API provides the statistics of Case variants related to the **Case structure** attribute.",
          "schema": {
            "type": "string",
            "example": "Activity"
          }
        },
        "activity": {
          "name": "activity-name",
          "in": "path",
          "required": true,
          "allowEmptyValue": true,
          "description": "Activity name",
          "schema": {
            "type": "string",
            "example": "Amend Purchase Requisition"
          }
        },
        "resource": {
          "name": "resource-name",
          "in": "path",
          "required": true,
          "allowEmptyValue": true,
          "description": "Name of the resource.",
          "schema": {
            "type": "string",
            "example": "User 12"
          }
        },
        "role": {
          "name": "role-name",
          "in": "path",
          "required": true,
          "allowEmptyValue": true,
          "description": "Name of the role.",
          "schema": {
            "type": "string",
            "example": "System Automatic Job"
          }
        },
        "sortBy": {
          "name": "sortBy",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "Sort the statistics of Case variants by throughput or frequency",
          "schema": {
            "type": "string",
            "enum": [
              "frequency",
              "throughput"
            ],
            "default": "frequency",
            "example": "frequency"
          }
        },
        "order": {
          "name": "order",
          "in": "query",
          "required": false,
          "allowEmptyValue": true,
          "description": "This API orders the Case variant statistics by the highest to lowest values of frequency or throughput.",
          "schema": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "desc",
            "example": "desc"
          }
        },
        "groupId": {
          "name": "groupId",
          "in": "path",
          "required": true,
          "description": "The unique id of the group to be deleted.",
          "schema": {
            "type": "string",
            "example": "632a2b8803d97e6c387b6985"
          }
        },
        "accountId": {
          "name": "accountId",
          "in": "path",
          "required": true,
          "description": "The unique id of the user for which the authorizations needs to be listed.",
          "schema": {
            "type": "string",
            "example": "6318141998d3ed39189df235"
          }
        },
        "authorizationId": {
          "name": "authorizationId",
          "in": "path",
          "required": true,
          "description": "The unique id of the authorization.",
          "schema": {
            "type": "string",
            "example": "6451438aedc6de0c1b1b1b5e"
          }
        },
        "dashboardId": {
          "name": "dashboardId",
          "in": "path",
          "required": true,
          "description": "The unique ID of the dashboard.",
          "schema": {
            "type": "string",
            "example": "842a2b8803d97e6c387b6985"
          }
        },
        "file": {
          "name": "file",
          "in": "query",
          "required": true,
          "description": "Binary file to be uploaded for the backup.",
          "schema": {
            "type": "string",
            "format": "binary"
          }
        }
      }
    }
  }